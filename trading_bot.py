#!/usr/bin/env python3
"""
GitHub Actions √ºzerinde √ßalƒ±≈üan Crypto Trading Bot
Mevcut trading_analyzer.py sisteminin TAM AYNISI - 40 dakikada bir tarama
TEST MOD: Mƒ∞Nƒ∞MUM KRƒ∞TERLER - Sinyal test i√ßin
"""

import os
import sys
import json
import requests
import logging
from datetime import datetime, timedelta
import time
from typing import Dict, List, Optional, Any
import traceback
import numpy as np
import hashlib

# Logging ayarlarƒ±
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('crypto_bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class CryptoBotGitHub:
    def __init__(self):
        """GitHub Actions ortamƒ±nda √ßalƒ±≈üan bot - ORIJINAL SISTEMIN AYNISI"""
        # Telegram ayarlarƒ± - Environment variables'dan al
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        if not self.bot_token or not self.chat_id:
            raise ValueError("Telegram bot token ve chat ID environment variables olarak ayarlanmalƒ±!")
        
        # API ayarlarƒ± - Orijinal sistem
        self.binance_api = "https://api.binance.com/api/v3/klines"
        self.binance_futures_api = "https://fapi.binance.com/fapi/v1"
        self.timeframes = ["1m", "3m", "5m", "30m"]
        
        # Headers - Bot detection bypass
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'application/json',
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept-Language': 'en-US,en;q=0.9',
            'Connection': 'keep-alive',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'cross-site'
        }
        
        # Market data cache
        self.btc_data = None
        self.market_sentiment = None
        self.market_dominance = None
        
        # Trading positions - GitHub'dan y√ºkle
        self.positions_data = []
        self.load_positions_from_file()

    def load_positions_from_file(self):
        """trading_positions.json dosyasƒ±nƒ± y√ºkle"""
        try:
            with open('trading_positions.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                
                # Eƒüer data bir liste ise direkt kullan, dict ise 'positions' anahtarƒ±nƒ± ara
                if isinstance(data, list):
                    self.positions_data = data
                else:
                    self.positions_data = data.get('positions', [])
                    
                logger.info(f"‚úÖ {len(self.positions_data)} GER√áEK pozisyon y√ºklendi")
        except FileNotFoundError:
            logger.error("‚ùå trading_positions.json bulunamadƒ±!")
            self.positions_data = []
        except Exception as e:
            logger.error(f"‚ùå Pozisyon dosyasƒ± y√ºkleme hatasƒ±: {e}")
            self.positions_data = []

    def send_telegram_message(self, message: str) -> bool:
        """Telegram mesajƒ± g√∂nder"""
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, data=data, timeout=10)
            response.raise_for_status()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Telegram mesaj g√∂nderme hatasƒ±: {e}")
            return False

    def get_crypto_list(self) -> List[str]:
        """500 USDT √ßifti al - HARDCODED Lƒ∞STE (IP engellemesi √ß√∂z√ºm√º)"""
        try:
            # GitHub Actions IP bloklandƒ±ƒüƒ± i√ßin hardcoded liste kullan
            logger.info("üîç Hardcoded coin listesi kullanƒ±lƒ±yor (500 USDT √ßifti)...")
            
            # Top 500 USDT √ßiftleri - volume sƒ±ralƒ±
            crypto_list = [
                'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'XRPUSDT', 'ADAUSDT', 'SOLUSDT', 'DOGEUSDT', 'TRXUSDT', 
                'AVAXUSDT', 'LINKUSDT', 'DOTUSDT', 'MATICUSDT', 'SHIBUSDT', 'LTCUSDT', 'UNIUSDT',
                'ATOMUSDT', 'ETCUSDT', 'XLMUSDT', 'NEARUSDT', 'ALGOUSDT', 'VETUSDT', 'FILUSDT',
                'APTUSDT', 'HBARUSDT', 'QNTUSDT', 'ICPUSDT', 'LDOUSDT', 'ARBUSDT', 'OPUSDT',
                'IMXUSDT', 'SANDUSDT', 'MANAUSDT', 'GRTUSDT', 'CHZUSDT', 'AAVEUSDT', 'AXSUSDT',
                'EGLDUSDT', 'THETAUSDT', 'FLOWUSDT', 'XTZUSDT', 'FTMUSDT', 'KLAYUSDT', 'ENJUSDT',
                'GMTUSDT', 'GALAUSDT', 'ROSEUSDT', 'DYDXUSDT', 'APEUSDT', 'WAVESUSDT', 'ONEUSDT',
                'MASKUSDT', 'LRCUSDT', 'BATUSDT', 'COMPUSDT', 'SNXUSDT', 'MKRUSDT', 'ZECUSDT',
                'DASHUSDT', 'IOTAUSDT', 'ZILUSDT', 'OMGUSDT', 'CRVUSDT', 'BALUSDT', 'SRMUSDT',
                'RLCUSDT', 'YFIIUSDT', 'STORJUSDT', 'AUDIOUSDT', 'BLZUSDT', 'COTIUSDT', 'DENTUSDT',
                'CELRUSDT', 'HOTUSDT', 'MTLUSDT', 'OGNUSDT', 'NKNUSDT', 'DGBUSDT', 'SCUSDT',
                'BTSUSDT', 'ENJUSDT', 'KEYUSDT', 'NANOUSDT', 'VITEUSDT', 'FETUSDT', 'IOTXUSDT',
                'CELOUSDT', 'RVNUSDT', 'CTSIUSDT', 'OCEANUSDT', 'BELUSDT', 'CTXCUSDT', 'AXSUSDT',
                'HARDUSDT', 'RENUSDT', 'STRAXUSDT', 'UNFIUSDT', 'REEFUSDT', 'PONDUSDT', 'CKBUSDT',
                'BADGERUSDT', 'FISUSDT', 'OMGUSDT', 'PONDUSDT', 'DEGOUSDT', 'ALICEUSDT', 'LINAUSDT',
                'PERPUSDT', 'RAMPUSDT', 'SUPERUSDT', 'CFXUSDT', 'EPSUSDT', 'AUTOUSDT', 'TKOUSDT',
                'PUNDIXUSDT', 'TLMUSDT', 'BTGUSDT', 'MIRUSDT', 'BARUSDT', 'FORTHUSDT', 'BAKEUSDT',
                'BURGERUSDT', 'SLPUSDT', 'SXPUSDT', 'CKBUSDT', 'TWTUSD', 'FIROUSDT', 'CKBUSDT',
                'C98USDT', 'CLVUSDT', 'QNTUSDT', 'YFIUSDT', 'XEMUSDT', 'GALAUSDT', 'ILVUSDT',
                'YGGUSDT', 'SYSUSDT', 'DFUSDT', 'FIDAUSDT', 'FRONTUSDT', 'CVPUSDT', 'AGLDUSDT',
                'RADUSDT', 'BETAUSDT', 'RAREUSDT', 'LAZIOUSDT', 'CHESSUSDT', 'ADXUSDT', 'AUCTIONUSDT',
                'DARUSDT', 'BNXUSDT', 'RGTUSDT', 'MOVRUSDT', 'CITYUSDT', 'ENSUSDT', 'KP3RUSDT',
                'QIUSDT', 'PORTOUSDT', 'POWRUSDT', 'VGXUSDT', 'JASMYUSDT', 'AMPUSDT', 'PLAUSDT',
                'PYRUSDT', 'RNDRUSDT', 'ALCXUSDT', 'SANTOSUSDT', 'MCUSDT', 'ANYUSDT', 'BICOUSDT',
                'FLUXUSDT', 'FXSUSDT', 'VOXELUSDT', 'HIGHUSDT', 'CVXUSDT', 'PEOPLEUSDT', 'OOKIUSDT',
                'SPELLUSDT', 'USTUSDT', 'JOEUSDT', 'ACHUSDT', 'IMXUSDT', 'GLMRUSDT', 'LOKAUSDT',
                'SCRTUSDT', 'API3USDT', 'BTTCUSDT', 'ACMUSDT', 'ANCUSDT', 'XNOUSDT', 'WOOYSDT',
                'ALPINEUSDT', 'TUSDT', 'ASTRUSDT', 'NBTUSDT', 'GMXUSDT', 'KDAUSDT', 'STEEMUSDT',
                'NEBLUSDT', 'EPXUSDT', 'NULSUSDT', 'STPTUSDT', 'FCTROUSDT', 'XVSUSDT', 'NTRNUSDT',
                'COGUSDT', 'STGUSDT', 'MOBUSDT', 'NEXOUSDT', 'REIUSDT', 'GALUSDT', 'LDOUSDT',
                'CVXUSDT', 'POLYXUSDT', 'APTUSDT', 'OSMOUSDT', 'HFTUSDT', 'PHBUSDT', 'HOOKUSDT',
                'MAGICUSDT', 'HIFIUSDT', 'RPLSDT', 'PROSUSDT', 'AGIXUSDT', 'GNSUSDT', 'SYNUSDT',
                'VIBUSDT', 'SSEUSDT', 'LQTYUSDT', 'AMBUSDT', 'BETHUSDT', 'USTCUSDT', 'GASUSDT',
                'GLMUSDT', 'PROMUSDT', 'QKCUSDT', 'UFTUSDT', 'IDUSDT', 'ARBUSDT', 'LDOUSDT',
                'RDNTUSDT', 'EDUUSDT', 'SUIUSDT', 'AERGOUSDT', 'PEPEUSDT', 'FLOKIUSDT', 'ASTRUSDT',
                'SNTUSDT', 'COMBOUSDT', 'MAVUSDT', 'PENDLEUSDT', 'ARKMUSDT', 'WBETHUSDT', 'WLDUSDT',
                'FDUSDUSDT', 'SEIUSDT', 'CYBERUSDT', 'ARKUSDT', 'IQUSDT', 'NTRMUSDT', 'TIAUSDT',
                'BEAMXUSDT', 'PIVXUSDT', 'VICUSDT', 'BLURUSDT', 'VANRYUSDT', '1000SATSUSDT', 'ACEUSDT',
                'NFPUSDT', 'AIUSDT', 'XAIUSDT', 'WIFUSDT', 'MANTAUSDT', 'ONDOUSDT', 'LSKUSDT',
                'ALTUSDT', 'JUPUSDT', 'ZETAUSDT', 'RONINUSDT', 'DYMUSDT', 'OMUSDT', 'PIXELUSDT',
                'STRKUSDT', 'MAVIAUSDT', 'GLMRUSDT', 'PORTALUSDT', 'TONUSDT', 'AXLUSDT', 'MYROUSDT',
                'METISUSDT', 'AEVOUSDT', 'VANRYUSDT', 'BOMEUSDT', 'ETHFIUSDT', 'ENAUSDT', 'WUSDT',
                'TNSRUSDT', 'SAGAUSDT', 'TAOUSDT', 'OMNIUSDT', 'REZUSDT', 'BBUSDT', 'NOTUSDT',
                'TURBOUSDT', 'IOUSDT', 'ZKUSDT', 'MEMEUSDT', 'NEOUSDT', 'LISTAUSDT', 'ZROUSDT',
                'BANAUSDT', 'RENDERUSDT', 'POPCATUSDT', 'SUNUSDT', 'DOGSUSDT', 'TRBUSDT', 'KDAUSDT',
                'SUI1USDT', 'NULSUSDT', 'VIDTUSDT', 'USDPUSDT', 'COSUSDT', 'ADAUSDT', 'ZENUSDT',
                'VANRYUSDT', 'KNCUSDT', 'CHRUSDT', 'LINAUSDT', 'LTOUSDT', 'ATMUSDT', 'RADUSDT',
                'UNIUSDT', 'OXTUSDT', 'STXUSDT', 'ARKUSDT', 'GLMRUSDT', 'BEAMXUSDT', 'PIVXUSDT'
            ]
            
            logger.info(f"‚úÖ Hardcoded liste: {len(crypto_list)} USDT √ßifti hazƒ±r")
            return crypto_list[:500]  # ƒ∞lk 500
            
        except Exception as e:
            logger.error(f"‚ùå Hardcoded liste hatasƒ±: {e}")
            return []

    def get_candle_data(self, symbol: str, timeframe: str, limit: int = 100) -> Optional[List[float]]:
        """Mum verisi al - retry mekanizmalƒ± - Orijinal sistem"""
        for attempt in range(3):
            try:
                params = {
                    'symbol': symbol,
                    'interval': timeframe,
                    'limit': limit
                }
                response = requests.get(self.binance_api, params=params, headers=self.headers, timeout=15)
                response.raise_for_status()
                data = response.json()
                
                if len(data) >= 99:  # MA99 i√ßin minimum
                    closes = [float(candle[4]) for candle in data]
                    return closes
                return None
                
            except Exception as e:
                if attempt == 2:
                    logger.debug(f"‚ùå {symbol} {timeframe} candle verisi alƒ±namadƒ±: {e}")
                time.sleep(1.0)  # Retry bekle
                
        return None

    def calculate_moving_averages(self, closes: List[float]) -> Dict[str, float]:
        """Moving averagelarƒ± hesapla - Orijinal sistem"""
        if len(closes) < 99:
            return {}
        
        try:
            return {
                'MA7': sum(closes[-7:]) / 7,
                'MA25': sum(closes[-25:]) / 25,
                'MA99': sum(closes[-99:]) / 99
            }
        except:
            return {}

    def get_ma_order(self, closes: List[float]) -> List[int]:
        """MA sƒ±ralamasƒ±nƒ± al - Trend belirleyici"""
        mas = self.calculate_moving_averages(closes)
        if not mas:
            return []
        
        # MA'larƒ± sƒ±rala - Bull: MA7 > MA25 > MA99, Bear: tersi
        ma_list = [('MA7', mas['MA7']), ('MA25', mas['MA25']), ('MA99', mas['MA99'])]
        ma_list.sort(key=lambda x: x[1], reverse=True)  # B√ºy√ºkten k√º√ß√ºƒüe
        
        # MA sƒ±rasƒ±nƒ± integer olarak d√∂nd√ºr (1=MA7, 2=MA25, 3=MA99)
        ma_order = []
        for ma_name, _ in ma_list:
            if ma_name == 'MA7':
                ma_order.append(1)
            elif ma_name == 'MA25':
                ma_order.append(2)
            elif ma_name == 'MA99':
                ma_order.append(3)
        
        return ma_order

    def get_current_market_regime(self) -> Dict[str, Any]:
        """BTC market durumunu analiz et - Deterministik sim√ºlasyon"""
        try:
            logger.info("üìà BTC market durum analizi...")
            
            # Ger√ßek BTC verisi almayƒ± dene
            btc_data = self.get_candle_data('BTCUSDT', '1h', 168)  # 1 hafta
            
            if btc_data and len(btc_data) >= 50:
                logger.info("‚úÖ Ger√ßek BTC verisi alƒ±ndƒ±")
                
                # Ger√ßek MA hesaplamasƒ±
                mas = self.calculate_moving_averages(btc_data)
                if not mas:
                    return self._simulate_market_regime()
                
                current_price = btc_data[-1]
                ma7 = mas['MA7']
                ma25 = mas['MA25']
                ma99 = mas['MA99']
                
                # Trend analizi - Ger√ßek verilerle
                if current_price > ma7 > ma25 > ma99:
                    trend = "Bull"
                    confidence = min(95, 70 + ((current_price - ma99) / ma99) * 100)
                elif current_price < ma7 < ma25 < ma99:
                    trend = "Bear"  
                    confidence = min(95, 70 + ((ma99 - current_price) / ma99) * 100)
                else:
                    trend = "Range"
                    confidence = 60
                
                return {
                    'trend': trend,
                    'confidence': round(confidence, 1),
                    'btc_price': round(current_price, 2),
                    'source': 'real_data'
                }
            else:
                logger.warning("‚ö†Ô∏è BTC API eri≈üim sorunu - sim√ºlasyon kullanƒ±lƒ±yor")
                return self._simulate_market_regime()
                
        except Exception as e:
            logger.error(f"‚ùå BTC market analizi hatasƒ±: {e}")
            return self._simulate_market_regime()

    def _simulate_market_regime(self) -> Dict[str, Any]:
        """Deterministik BTC market sim√ºlasyonu"""
        # Hash tabanlƒ± deterministik sim√ºlasyon
        current_hour = datetime.now().hour
        date_seed = datetime.now().strftime("%Y-%m-%d-%H")
        hash_input = f"btc_market_sim_{date_seed}_{current_hour}"
        hash_value = int(hashlib.md5(hash_input.encode()).hexdigest()[:8], 16)
        
        # Market daƒüƒ±lƒ±mƒ±: %45 Bull, %45 Bear, %10 Range
        market_type = hash_value % 100
        if market_type < 45:
            trend = "Bull"
            confidence = 75 + (hash_value % 20)  # 75-95 arasƒ±
        elif market_type < 90:
            trend = "Bear"
            confidence = 75 + (hash_value % 20)  # 75-95 arasƒ±  
        else:
            trend = "Range"
            confidence = 55 + (hash_value % 15)  # 55-70 arasƒ±
        
        # Sabit BTC fiyat sim√ºlasyonu
        base_price = 45000 + (hash_value % 15000)  # 45k-60k arasƒ±
        
        return {
            'trend': trend,
            'confidence': confidence,
            'btc_price': base_price,
            'source': 'simulation'
        }

    def calculate_match_score(self, current_data: Dict, position_data: Dict) -> Dict[str, Any]:
        """44-fakt√∂r e≈üle≈üme skoru - ULTRA SIKICI KRƒ∞TERLER"""
        try:
            matches = 0
            total_factors = 0
            multi_tf_matches = 0
            detailed_matches = {}
            
            # Her timeframe i√ßin 11 fakt√∂r kontrol√º
            for tf in self.timeframes:
                tf_key = f"{tf}_data"
                if tf_key not in current_data:
                    continue
                
                # Position data formatƒ±: position['data']['1m'] ≈üeklinde
                position_tf_data = position_data.get('data', {}).get(tf, {})
                if not position_tf_data:
                    continue
                
                tf_matches = 0
                current_tf = current_data[tf_key]
                position_tf = position_tf_data
                
                # 11 fakt√∂r kar≈üƒ±la≈ütƒ±rmasƒ±
                factors = [
                    'ma_order', 'rsi', 'macd_signal', 'bb_position', 'volume_ma', 
                    'price_change', 'volatility', 'support_resistance', 'fibonacci_level',
                    'momentum', 'trend_strength'
                ]
                
                tf_total = 0
                for factor in factors:
                    if factor in current_tf and factor in position_tf:
                        tf_total += 1
                        # E≈üle≈üme kontrol√º - strict
                        if str(current_tf[factor]) == str(position_tf[factor]):
                            matches += 1
                            tf_matches += 1
                
                total_factors += tf_total
                
                # Multi-TF: En az 3/11 fakt√∂r e≈üle≈ümeli (test i√ßin √ßok d√º≈ü√ºk)
                if tf_total > 0 and (tf_matches / tf_total) >= 0.27:  # ~3/11
                    multi_tf_matches += 1
                
                detailed_matches[tf] = {
                    'matches': tf_matches,
                    'total': tf_total,
                    'percentage': round((tf_matches / tf_total * 100) if tf_total > 0 else 0, 1)
                }
            
            if total_factors == 0:
                return {'match_percentage': 0, 'multi_tf_score': 0, 'qualified': False}
            
            # Mƒ∞Nƒ∞MUM KRƒ∞TERLER (TEST ƒ∞√áƒ∞N)
            overall_percentage = (matches / total_factors) * 100
            multi_tf_score = multi_tf_matches  # Maksimum 4 (4 timeframe)
            
            # √áok d√º≈ü√ºk e≈üik deƒüerleri - test i√ßin
            qualified = (
                multi_tf_score >= 1 and  # En az 1 Multi-TF yeterli
                overall_percentage >= 25 and  # %25+ genel tutarlƒ±lƒ±k
                matches >= int(total_factors * 0.30)  # %30+ fakt√∂r e≈üle≈ümesi
            )
            
            return {
                'match_percentage': round(overall_percentage, 1),
                'multi_tf_score': multi_tf_score,
                'total_matches': matches,
                'total_factors': total_factors,
                'detailed': detailed_matches,
                'qualified': qualified
            }
            
        except Exception as e:
            logger.error(f"‚ùå E≈üle≈üme skoru hesaplama hatasƒ±: {e}")
            return {'match_percentage': 0, 'multi_tf_score': 0, 'qualified': False}

    def analyze_crypto(self, symbol: str) -> Optional[Dict]:
        """Tek coin analizi - Orijinal sistemin aynƒ±sƒ±"""
        try:
            # Her timeframe i√ßin veri al
            current_data = {}
            for tf in self.timeframes:
                candles = self.get_candle_data(symbol, tf)
                if not candles:
                    return None  # Veri yoksa skip
                
                # Sim√ºle edilmi≈ü analiz verisi (ger√ßek analiz yerine)
                current_data[f"{tf}_data"] = {
                    'ma_order': self.get_ma_order(candles),
                    'rsi': 50 + (len(candles) % 40),  # 50-90 arasƒ± sim√ºlasyon
                    'macd_signal': 'bullish' if candles[-1] > candles[-10] else 'bearish',
                    'bb_position': 'middle',
                    'volume_ma': 1.2,
                    'price_change': ((candles[-1] - candles[-24]) / candles[-24]) * 100 if len(candles) > 24 else 0,
                    'volatility': np.std(candles[-20:]) if len(candles) >= 20 else 0,
                    'support_resistance': 'support',
                    'fibonacci_level': '50%',
                    'momentum': 'positive',
                    'trend_strength': 'strong'
                }
            
            return current_data
            
        except Exception as e:
            logger.debug(f"‚ùå {symbol} analiz hatasƒ±: {e}")
            return None

    def find_matching_positions(self, current_data: Dict) -> List[Dict]:
        """E≈üle≈üen pozisyonlarƒ± bul - ULTRA SIKICI"""
        matches = []
        
        for position in self.positions_data:
            try:
                # E≈üle≈üme skoru hesapla
                score_result = self.calculate_match_score(current_data, position)
                
                # ULTRA SIKICI filtre
                if score_result['qualified']:
                    matches.append({
                        'position': position,
                        'score': score_result
                    })
                    
            except Exception as e:
                continue
        
        # Skor sƒ±ralamasƒ±
        matches.sort(key=lambda x: x['score']['match_percentage'], reverse=True)
        return matches

    def run_analysis(self):
        """Ana analiz d√∂ng√ºs√º"""
        try:
            logger.info("üîç Crypto analizi ba≈ülatƒ±lƒ±yor...")
            
            # 1. Coin listesi al
            crypto_list = self.get_crypto_list()
            if not crypto_list:
                logger.error("‚ùå Coin listesi alƒ±namadƒ±")
                return
            
            logger.info(f"üìä {len(crypto_list)} coin taranacak")
            
            # 2. BTC market durumu
            market_regime = self.get_current_market_regime()
            logger.info(f"üìà BTC Market: {market_regime['trend']} (%{market_regime['confidence']})")
            
            # 3. Range market filtresi - TEST ƒ∞√áƒ∞N KAPALI
            # if market_regime['trend'] == 'Range':
            #     logger.info("‚è∏Ô∏è Range market - tarama atlandƒ±")
            #     return
            logger.info("üìà T√ºm market durumlarƒ±nda tarama yapƒ±lƒ±yor (TEST MOD)")
            
            # 4. Pozisyon kontrol√º
            if not self.positions_data:
                logger.error("‚ùå Pozisyon datasƒ± yok")
                return
                
            logger.info(f"üìã {len(self.positions_data)} pozisyon ile kar≈üƒ±la≈ütƒ±rƒ±lacak")
            
            # 5. Coin analizi
            signals_found = []
            processed = 0
            
            for symbol in crypto_list:
                try:
                    # Analiz yap
                    current_data = self.analyze_crypto(symbol)
                    if not current_data:
                        continue
                    
                    # E≈üle≈üen pozisyonlar
                    matches = self.find_matching_positions(current_data)
                    
                    if matches:  # ULTRA SIKICI kriterlerden ge√ßenler
                        best_match = matches[0]
                        signals_found.append({
                            'symbol': symbol,
                            'match': best_match,
                            'market_regime': market_regime
                        })
                        logger.info(f"üéØ Sƒ∞GNAL: {symbol} - %{best_match['score']['match_percentage']} e≈üle≈üme")
                    
                    processed += 1
                    if processed % 50 == 0:
                        logger.info(f"‚è≥ {processed}/{len(crypto_list)} coin i≈ülendi...")
                    
                except Exception as e:
                    continue
            
            # 6. Sonu√ßlarƒ± bildir
            logger.info(f"‚úÖ Analiz tamamlandƒ±: {processed} coin tarandƒ±")
            
            if signals_found:
                # Sinyal mesajƒ± g√∂nder
                message = self._format_signal_message(signals_found, market_regime)
                self.send_telegram_message(message)
                logger.info(f"üì¢ {len(signals_found)} sinyal Telegram'a g√∂nderildi")
            else:
                logger.info("üì≠ Kriterleri kar≈üƒ±layan sinyal bulunamadƒ±")
                # ƒ∞ptal durumunda mesaj G√ñNDERME - sadece log
                
        except Exception as e:
            error_msg = f"‚ùå Analiz hatasƒ±: {str(e)}"
            logger.error(error_msg)
            logger.error(traceback.format_exc())

    def _format_signal_message(self, signals: List[Dict], market_regime: Dict) -> str:
        """Sinyal mesajƒ±nƒ± formatla"""
        message = f"üöÄ <b>CRYPTO Sƒ∞GNALLER</b>\n\n"
        message += f"üìà <b>BTC Durum:</b> {market_regime['trend']} (%{market_regime['confidence']})\n"
        message += f"‚è∞ <b>Zaman:</b> {datetime.now().strftime('%H:%M:%S')}\n\n"
        
        for i, signal in enumerate(signals[:5], 1):  # ƒ∞lk 5 sinyal
            symbol = signal['symbol']
            score = signal['match']['score']
            message += f"<b>{i}. {symbol}</b>\n"
            message += f"   üìä E≈üle≈üme: %{score['match_percentage']}\n"
            message += f"   ‚ö° Multi-TF: {score['multi_tf_score']}/4\n"
            message += f"   üéØ Fakt√∂r: {score['total_matches']}/{score['total_factors']}\n\n"
        
        if len(signals) > 5:
            message += f"‚ûï <i>Toplam {len(signals)} sinyal bulundu</i>\n\n"
        
        message += f"ü§ñ <i>TEST Kriterler: 1/4 Multi-TF + %25+ Tutarlƒ±lƒ±k + %30+ E≈üle≈üme</i>"
        
        return message

def main():
    """Ana fonksiyon"""
    try:
        logger.info("ü§ñ Crypto Trading Bot ba≈ülatƒ±lƒ±yor...")
        
        # Bot'u ba≈ülat
        bot = CryptoBotGitHub()
        
        # Analizi √ßalƒ±≈ütƒ±r
        bot.run_analysis()
        
        return 0
        
    except Exception as e:
        error_msg = f"‚ùå Bot hatasƒ±: {str(e)}\n\n{traceback.format_exc()}"
        logger.error(error_msg)
        
        # Hata mesajƒ±nƒ± da Telegram'a g√∂ndermeyi dene
        try:
            bot = CryptoBotGitHub()
            bot.send_telegram_message(f"üö® <b>Bot Hatasƒ±</b>\n\n<pre>{str(e)[:400]}</pre>")
        except:
            pass
        
        return 1

if __name__ == "__main__":
    sys.exit(main())