import tkinter as tk
from tkinter import messagebox, ttk
import json
import os
import requests
import threading
from datetime import datetime, timedelta
import numpy as np

class TradingAnalyzer:
    def __init__(self, root):
        self.root = root
        if root:
            self.root.title("Crypto Trading Signal Analyzer")
            self.root.geometry("900x700")
            self.root.configure(bg='#f0f0f0')
        
        # Kripto para isimleri
        self.crypto_names = [
            "ETH", "XRP", "1000PEPE", "ADA", "WIF", "MANTA", 
            "HUMA", "KNC", "ATOM", "BTCDOM", "DOLO", "TAG", 
            "AIN", "BIO", "TST", "CPX", "TRX", "AUCTION"
        ]
        
        # 18 veri seti i√ßin bo≈ü database
        self.database = []
        
        # Dosya yolu - kullanƒ±cƒ± dizininde
        self.data_file = os.path.join(os.path.expanduser("~"), "crypto_trading_data.json")
        self.positions_file = os.path.join(os.path.expanduser("~"), "trading_positions.json")
        
        # API ayarlarƒ±
        self.binance_api = "https://api.binance.com/api/v3/klines"
        self.binance_futures_api = "https://fapi.binance.com/fapi/v1"
        self.timeframes = ["1m", "3m", "5m", "30m"]
        self.scanning = False
        
        # Market data cache
        self.btc_data = None
        self.market_sentiment = None
        self.market_dominance = None
        
        # Pozisyon verileri
        self.positions_data = []
        self.load_positions()
        
        # Telegram ayarlarƒ±
        self.bot_token = "8036527191:AAEGeUZHDb4AMLICFGmGl6OdrN4hrSaUpoQ"
        self.chat_id = "1119272011"
        
        if root:
            self.setup_ui()
        
    def setup_ui(self):
        # Ba≈ülƒ±k
        title_label = tk.Label(self.root, text="Crypto Trading Signal Analyzer", 
                              font=("Arial", 18, "bold"), 
                              bg='#f0f0f0', fg='#333')
        title_label.pack(pady=10)
        
        subtitle = tk.Label(self.root, text="18 Crypto - Her birinde 4 kutu, her kutuda 3 deƒüer", 
                           font=("Arial", 10), bg='#f0f0f0', fg='#666')
        subtitle.pack()
        
        # Notebook (sekmeler)
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # VERƒ∞ Gƒ∞Rƒ∞≈ûƒ∞ SEKMESƒ∞
        data_frame = tk.Frame(notebook, bg='#f0f0f0')
        notebook.add(data_frame, text="Veri Giri≈üi (18 Crypto)")
        
        # Canvas ve scrollbar i√ßin frame
        canvas_frame = tk.Frame(data_frame)
        canvas_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Canvas ve scrollbar
        canvas = tk.Canvas(canvas_frame, bg='#f0f0f0')
        scrollbar = tk.Scrollbar(canvas_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg='#f0f0f0')
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # 18 kripto i√ßin giri≈üler
        self.data_entries = []
        self.result_entries = []
        
        for i in range(18):
            crypto_name = self.crypto_names[i]
            
            # Her kripto i√ßin frame
            set_frame = tk.LabelFrame(scrollable_frame, text=f"{crypto_name} - Veri Seti {i+1}", 
                                     font=("Arial", 12, "bold"), 
                                     bg='#f8f8f8', relief='raised', bd=2,
                                     fg='#2c3e50')
            set_frame.pack(fill='x', padx=10, pady=8)
            
            # 4 kutu i√ßin giri≈üler
            boxes_frame = tk.Frame(set_frame, bg='#f8f8f8')
            boxes_frame.pack(pady=8)
            
            tk.Label(boxes_frame, text=f"{crypto_name} i√ßin 4 kutu (her kutuda 3 deƒüer):", 
                    font=("Arial", 10, "bold"), bg='#f8f8f8', fg='#34495e').pack()
            
            # 4 kutu yan yana
            all_boxes_frame = tk.Frame(boxes_frame, bg='#f8f8f8')
            all_boxes_frame.pack(pady=5)
            
            crypto_entries = []
            for box_num in range(4):
                box_frame = tk.LabelFrame(all_boxes_frame, text=f"Kutu {box_num+1}", 
                                         font=("Arial", 9, "bold"), bg='#f0f0f0')
                box_frame.pack(side=tk.LEFT, padx=5, pady=5, fill='both')
                
                box_entries = []
                for val_num in range(3):
                    value_frame = tk.Frame(box_frame, bg='#f0f0f0')
                    value_frame.pack(pady=2)
                    
                    tk.Label(value_frame, text=f"Deƒüer {val_num+1}:", 
                            font=("Arial", 8), bg='#f0f0f0').pack()
                    
                    combo = ttk.Combobox(value_frame, values=[25, 7, 99], 
                                       width=6, state="readonly", font=("Arial", 9))
                    combo.pack(pady=1)
                    box_entries.append(combo)
                
                crypto_entries.append(box_entries)
            
            self.data_entries.append(crypto_entries)
            
            # Sonu√ß giri≈üi
            result_frame = tk.Frame(set_frame, bg='#f8f8f8')
            result_frame.pack(pady=8)
            
            tk.Label(result_frame, text="Trading Sinyali:", 
                    font=("Arial", 10, "bold"), bg='#f8f8f8', fg='#34495e').pack(side=tk.LEFT, padx=5)
            
            result_combo = ttk.Combobox(result_frame, values=["LONG", "SHORT"], 
                                       width=12, state="readonly", font=("Arial", 10, "bold"))
            result_combo.pack(side=tk.LEFT, padx=10)
            self.result_entries.append(result_combo)
        
        # Kaydet/Y√ºkle butonlarƒ±
        button_frame = tk.Frame(data_frame, bg='#f0f0f0')
        button_frame.pack(pady=15)
        
        tk.Button(button_frame, text="T√úM VERƒ∞LERƒ∞ KAYDET", 
                 command=self.save_all_data,
                 bg='#27ae60', fg='white', font=("Arial", 11, "bold"),
                 width=20, height=2).pack(side=tk.LEFT, padx=10)
        
        tk.Button(button_frame, text="DOSYADAN Y√úKLE", 
                 command=self.load_data,
                 bg='#3498db', fg='white', font=("Arial", 11, "bold"),
                 width=15, height=2).pack(side=tk.LEFT, padx=10)
        
        tk.Button(button_frame, text="T√úM√úN√ú TEMƒ∞ZLE", 
                 command=self.clear_all_data,
                 bg='#e74c3c', fg='white', font=("Arial", 11, "bold"),
                 width=15, height=2).pack(side=tk.LEFT, padx=10)
        
        tk.Button(button_frame, text="üóëÔ∏è POZƒ∞SYONLARI Sƒ∞L", 
                 command=self.clear_all_positions,
                 bg='#8e44ad', fg='white', font=("Arial", 11, "bold"),
                 width=18, height=2).pack(side=tk.LEFT, padx=10)
        
        # TEST SEKMESƒ∞
        test_frame = tk.Frame(notebook, bg='#f0f0f0')
        notebook.add(test_frame, text="Trading Analizi")
        
        # CANLI TARAMA SEKMESƒ∞
        scan_frame = tk.Frame(notebook, bg='#f0f0f0')
        notebook.add(scan_frame, text="Canlƒ± Tarama")
        
        # POZƒ∞SYON KAYDI SEKMESƒ∞
        position_frame = tk.Frame(notebook, bg='#f0f0f0')
        notebook.add(position_frame, text="Pozisyon Kayƒ±t")
        
        # AI SOHBET SEKMESƒ∞
        ai_chat_frame = tk.Frame(notebook, bg='#f0f0f0')
        notebook.add(ai_chat_frame, text="ü§ñ AI Asistan")
        
        tk.Label(test_frame, text="CRYPTO TRADING ANALƒ∞Zƒ∞", 
                font=("Arial", 18, "bold"), bg='#f0f0f0', fg='#2c3e50').pack(pady=15)
        
        tk.Label(test_frame, text="4 kutu x 3 deƒüer girin - Hangi kripto ile e≈üle≈üiyorsa onu g√∂sterecek", 
                font=("Arial", 12), bg='#f0f0f0', fg='#7f8c8d').pack()
        
        # Kripto se√ßimi kaldƒ±rƒ±ldƒ± - otomatik e≈üle≈üme olacak
        
        # Test i√ßin 4 kutu x 3 deƒüer giri≈üi
        test_input_frame = tk.LabelFrame(test_frame, text="4 Kutu x 3 Deƒüer Girin", 
                                        font=("Arial", 12, "bold"), bg='#ecf0f1', fg='#2c3e50')
        test_input_frame.pack(pady=20, padx=20, fill='x')
        
        values_input_frame = tk.Frame(test_input_frame, bg='#ecf0f1')
        values_input_frame.pack(pady=15)
        
        self.test_entries = []
        for box_num in range(4):
            test_box_frame = tk.LabelFrame(values_input_frame, text=f"Kutu {box_num+1}", 
                                          font=("Arial", 10, "bold"), bg='#e8f4f8')
            test_box_frame.pack(side=tk.LEFT, padx=8, pady=5, fill='both')
            
            box_entries = []
            for val_num in range(3):
                test_value_frame = tk.Frame(test_box_frame, bg='#e8f4f8')
                test_value_frame.pack(pady=3)
                
                tk.Label(test_value_frame, text=f"Deƒüer {val_num+1}:", 
                        font=("Arial", 9), bg='#e8f4f8').pack()
                
                combo = ttk.Combobox(test_value_frame, values=[25, 7, 99], 
                                   width=8, state="readonly", font=("Arial", 10))
                combo.pack(pady=2)
                box_entries.append(combo)
            
            self.test_entries.append(box_entries)
        
        # Test butonlarƒ±
        test_button_frame = tk.Frame(test_frame, bg='#f0f0f0')
        test_button_frame.pack(pady=25)
        
        tk.Button(test_button_frame, text="üöÄ ANALƒ∞Z ET üöÄ", 
                 command=self.analyze_test,
                 font=("Arial", 16, "bold"),
                 bg='#e67e22', fg='white',
                 width=20, height=3).pack(side=tk.LEFT, padx=15)
        
        tk.Button(test_button_frame, text="Temizle", 
                 command=self.clear_test,
                 font=("Arial", 12),
                 bg='#95a5a6', fg='white',
                 width=12, height=2).pack(side=tk.LEFT, padx=15)
        
        # Sonu√ß g√∂sterimi
        result_display_frame = tk.LabelFrame(test_frame, text="SONU√á", 
                                           font=("Arial", 14, "bold"), 
                                           bg='#f8f9fa', fg='#2c3e50')
        result_display_frame.pack(pady=20, padx=50, fill='x')
        
        self.result_label = tk.Label(result_display_frame, text="", 
                                    font=("Arial", 24, "bold"), 
                                    bg='#f8f9fa', height=2)
        self.result_label.pack(pady=15)
        
        # E≈üle≈üen kripto bilgisi
        self.match_info_label = tk.Label(result_display_frame, text="", 
                                        font=("Arial", 12), 
                                        bg='#f8f9fa', fg='#34495e')
        self.match_info_label.pack(pady=5)
        
        # Mouse wheel scroll i√ßin bind
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        # CANLI TARAMA ARAY√úZ√ú
        self.setup_live_scan_ui(scan_frame)
        
        # POZƒ∞SYON KAYIT ARAY√úZ√ú
        self.setup_position_ui(position_frame)
        
        # AI SOHBET ARAY√úZ√ú
        self.setup_ai_chat_ui(ai_chat_frame)
    
    def save_all_data(self):
        """T√ºm kripto verilerini kaydet"""
        try:
            database = []
            empty_count = 0
            
            for i in range(18):
                crypto_name = self.crypto_names[i]
                
                # 4 kutu x 3 deƒüeri al
                boxes = []
                has_data = False
                
                for box_num in range(4):
                    box_values = []
                    for val_num in range(3):
                        value = self.data_entries[i][box_num][val_num].get()
                        if value:
                            box_values.append(int(value))
                            has_data = True
                        else:
                            box_values.append(None)
                    boxes.append(box_values)
                
                # Sonucu al
                result = self.result_entries[i].get()
                if result:
                    has_data = True
                
                # Bo≈ü olmayan setleri kaydet
                if has_data:
                    database.append({
                        'crypto': crypto_name,
                        'set_id': i + 1,
                        'boxes': boxes,
                        'result': result.lower() if result else ""
                    })
                else:
                    empty_count += 1
            
            self.database = database
            
            # Dosyaya kaydet
            with open(self.data_file, 'w') as f:
                json.dump(database, f, indent=2)
            
            filled_count = 18 - empty_count
            messagebox.showinfo("‚úÖ Ba≈üarƒ±lƒ±", 
                               f"Kripto verileri kaydedildi!\n{filled_count} crypto dolu, {empty_count} crypto bo≈ü")
            
        except Exception as e:
            messagebox.showerror("‚ùå Hata", f"Kaydetme hatasƒ±: {str(e)}")
    
    def load_data(self):
        """Dosyadan kripto verilerini y√ºkle"""
        try:
            with open(self.data_file, 'r') as f:
                data = json.load(f)
            
            # √ñnce t√ºm√ºn√º temizle
            self.clear_all_data()
            
            # Verileri form'a y√ºkle
            for item in data:
                set_id = item['set_id'] - 1  # 0-based index
                boxes = item.get('boxes', [])
                result = item['result']
                
                if set_id < 18:
                    # 4 kutu x 3 deƒüeri ayarla
                    for box_num in range(min(4, len(boxes))):
                        box_values = boxes[box_num]
                        for val_num in range(min(3, len(box_values))):
                            if box_values[val_num] is not None:
                                self.data_entries[set_id][box_num][val_num].set(str(box_values[val_num]))
                    
                    # Sonucu ayarla
                    if result:
                        self.result_entries[set_id].set(result.upper())
            
            self.database = data
            messagebox.showinfo("‚úÖ Ba≈üarƒ±lƒ±", f"{len(data)} kripto verisi y√ºklendi!")
            
        except FileNotFoundError:
            messagebox.showwarning("‚ö†Ô∏è Uyarƒ±", f"Veri dosyasƒ± bulunamadƒ±!\nDosya yolu: {self.data_file}")
        except Exception as e:
            messagebox.showerror("‚ùå Hata", f"Y√ºkleme hatasƒ±: {str(e)}")
    
    def clear_all_data(self):
        """T√ºm kripto verilerini temizle"""
        for i in range(18):
            for box_num in range(4):
                for val_num in range(3):
                    self.data_entries[i][box_num][val_num].set('')
            self.result_entries[i].set('')
    
    def analyze_test(self):
        """Test verilerini analiz et"""
        if not self.database:
            messagebox.showwarning("‚ö†Ô∏è Uyarƒ±", "√ñnce kripto verilerini girin ve kaydedin!")
            return
        
        # Test deƒüerlerini al (4 kutu x 3 deƒüer)
        test_boxes = []
        has_data = False
        
        for box_num in range(4):
            box_values = []
            for val_num in range(3):
                value = self.test_entries[box_num][val_num].get()
                if value:
                    box_values.append(int(value))
                    has_data = True
                else:
                    box_values.append(None)
            test_boxes.append(box_values)
        
        # En az bir deƒüer girilmi≈ü mi kontrol et
        if not has_data:
            messagebox.showwarning("‚ö†Ô∏è Uyarƒ±", "En az bir deƒüer girin!")
            return
        
        # T√ºm kriptolar arasƒ±nda e≈üle≈üme ara
        for item in self.database:
            if item.get('boxes', []) == test_boxes:
                # E≈üle≈üme bulundu!
                crypto_name = item['crypto']
                result = item['result']
                
                if result == 'long':
                    self.result_label.config(text="üìà LONG SIGNAL", fg='#27ae60')
                elif result == 'short':
                    self.result_label.config(text="üìâ SHORT SIGNAL", fg='#e74c3c')
                else:
                    self.result_label.config(text="‚ùì SONU√á YOK", fg='#f39c12')
                
                self.match_info_label.config(
                    text=f"üéØ E≈üle≈üen Kripto: {crypto_name}\nüíé 4 Kutu Deƒüerleri: {test_boxes}")
                return
        
        # E≈üle≈üme bulunamadƒ±
        self.result_label.config(text="‚ùå NO MATCH", fg='#e67e22')
        self.match_info_label.config(text="‚ùå Bu deƒüerler hi√ßbir kripto ile e≈üle≈ümiyor")
    
    def clear_test(self):
        """Test verilerini temizle"""
        for box_entries in self.test_entries:
            for combo in box_entries:
                combo.set('')
        self.result_label.config(text="", fg='black')
        self.match_info_label.config(text="")
    
    def setup_live_scan_ui(self, parent):
        """Canlƒ± tarama aray√ºz√º"""
        tk.Label(parent, text="CANLI KRƒ∞PTO TARAMA", 
                font=("Arial", 18, "bold"), bg='#f0f0f0', fg='#2c3e50').pack(pady=15)
        
        tk.Label(parent, text="500+ coin tarayƒ±p 1dk-3dk-5dk-30dk mum verilerini analiz eder", 
                font=("Arial", 12), bg='#f0f0f0', fg='#7f8c8d').pack()
        
        # Kontrol butonlarƒ±
        control_frame = tk.Frame(parent, bg='#f0f0f0')
        control_frame.pack(pady=20)
        
        self.scan_button = tk.Button(control_frame, text="üöÄ TARAMAYA BA≈ûLA", 
                                    command=self.start_live_scan,
                                    font=("Arial", 14, "bold"),
                                    bg='#27ae60', fg='white',
                                    width=20, height=2)
        self.scan_button.pack(side=tk.LEFT, padx=10)
        
        self.stop_button = tk.Button(control_frame, text="‚èπÔ∏è DURDUR", 
                                    command=self.stop_live_scan,
                                    font=("Arial", 14, "bold"),
                                    bg='#e74c3c', fg='white',
                                    width=15, height=2, state='disabled')
        self.stop_button.pack(side=tk.LEFT, padx=10)
        
        tk.Button(control_frame, text="üéØ KAPSAMLI TARAMA", 
                 command=self.open_advanced_scan,
                 font=("Arial", 12, "bold"),
                 bg='#8e44ad', fg='white',
                 width=18, height=2).pack(side=tk.LEFT, padx=10)
        
        # Durum g√∂sterimi
        status_frame = tk.LabelFrame(parent, text="TARAMA DURUMU", 
                                    font=("Arial", 12, "bold"), bg='#f8f9fa', fg='#2c3e50')
        status_frame.pack(pady=20, padx=20, fill='x')
        
        self.status_label = tk.Label(status_frame, text="Tarama durmu≈ü", 
                                    font=("Arial", 12), bg='#f8f9fa', fg='#7f8c8d')
        self.status_label.pack(pady=10)
        
        self.progress_label = tk.Label(status_frame, text="", 
                                      font=("Arial", 10), bg='#f8f9fa', fg='#34495e')
        self.progress_label.pack()
        
        # Sonu√ßlar
        results_frame = tk.LabelFrame(parent, text="E≈ûLE≈ûEN Sƒ∞NYALLER", 
                                     font=("Arial", 12, "bold"), bg='#f8f9fa', fg='#2c3e50')
        results_frame.pack(pady=20, padx=20, fill='both', expand=True)
        
        # Sonu√ß listesi
        self.results_text = tk.Text(results_frame, height=15, font=("Arial", 10))
        scrollbar_results = tk.Scrollbar(results_frame, orient="vertical", command=self.results_text.yview)
        self.results_text.configure(yscrollcommand=scrollbar_results.set)
        
        self.results_text.pack(side="left", fill="both", expand=True)
        scrollbar_results.pack(side="right", fill="y")
    
    def get_crypto_list(self):
        """Binance'den t√ºm USDT √ßiftlerini al"""
        try:
            response = requests.get("https://api.binance.com/api/v3/exchangeInfo", timeout=10)
            data = response.json()
            
            usdt_pairs = []
            for symbol in data['symbols']:
                if (symbol['symbol'].endswith('USDT') and 
                    symbol['status'] == 'TRADING' and 
                    symbol['symbol'] not in ['USDCUSDT', 'TUSDUSDT']):
                    usdt_pairs.append(symbol['symbol'])
            
            return usdt_pairs[:500]  # ƒ∞lk 500 coin
        except Exception as e:
            self.update_status(f"Coin listesi alƒ±namadƒ±: {str(e)}")
            return []
    
    def get_candle_data(self, symbol, timeframe, limit=100):
        """Belirli coin ve timeframe i√ßin mum verisi al (MA hesabƒ± i√ßin 100 mum) - retry ile"""
        for attempt in range(3):  # 3 deneme
            try:
                params = {
                    'symbol': symbol,
                    'interval': timeframe,
                    'limit': limit
                }
                response = requests.get(self.binance_api, params=params, timeout=15)
                data = response.json()
                
                if len(data) >= 99:  # MA99 i√ßin en az 99 mum gerekli
                    closes = [float(candle[4]) for candle in data]
                    return closes
                return None
            except:
                if attempt < 2:  # Son denemede deƒüilse bekle
                    threading.Event().wait(1)  # 1 saniye bekle
                continue
        return None
    
    def calculate_ma(self, closes, period):
        """Moving Average hesapla"""
        if len(closes) < period:
            return None
        return sum(closes[-period:]) / period
    
    def calculate_rsi(self, closes, period=14):
        """RSI hesapla"""
        if len(closes) < period + 1:
            return None
        
        deltas = np.diff(closes)
        gains = np.where(deltas > 0, deltas, 0)
        losses = np.where(deltas < 0, -deltas, 0)
        
        avg_gain = np.mean(gains[-period:])
        avg_loss = np.mean(losses[-period:])
        
        if avg_loss == 0:
            return 100
        
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        return round(rsi, 2)
    
    def calculate_macd(self, closes):
        """MACD hesapla"""
        if len(closes) < 26:
            return None, None, None
        
        ema_12 = self.calculate_ema(closes, 12)
        ema_26 = self.calculate_ema(closes, 26)
        
        if ema_12 is None or ema_26 is None:
            return None, None, None
        
        macd_line = ema_12 - ema_26
        signal_line = self.calculate_ema([macd_line], 9)
        histogram = macd_line - (signal_line or 0)
        
        return round(macd_line, 4), round(signal_line or 0, 4), round(histogram, 4)
    
    def calculate_ema(self, closes, period):
        """EMA hesapla"""
        if len(closes) < period:
            return None
        
        closes_array = np.array(closes)
        alpha = 2 / (period + 1)
        ema = closes_array[0]
        
        for price in closes_array[1:]:
            ema = alpha * price + (1 - alpha) * ema
        
        return ema
    
    def calculate_bollinger_bands(self, closes, period=20, std_dev=2):
        """Bollinger Bands hesapla"""
        if len(closes) < period:
            return None, None, None
        
        ma = self.calculate_ma(closes, period)
        if ma is None:
            return None, None, None
        
        closes_array = np.array(closes[-period:])
        std = np.std(closes_array)
        
        upper_band = ma + (std_dev * std)
        lower_band = ma - (std_dev * std)
        
        return round(upper_band, 4), round(ma, 4), round(lower_band, 4)
    
    def calculate_stoch_rsi(self, closes, period=14):
        """Stochastic RSI hesapla"""
        if len(closes) < period * 2:
            return None
        
        # RSI deƒüerlerini hesapla
        rsi_values = []
        for i in range(period, len(closes)):
            rsi = self.calculate_rsi(closes[:i+1], period)
            if rsi is not None:
                rsi_values.append(rsi)
        
        if len(rsi_values) < period:
            return None
        
        recent_rsi = rsi_values[-period:]
        min_rsi = min(recent_rsi)
        max_rsi = max(recent_rsi)
        
        if max_rsi == min_rsi:
            return 50
        
        stoch_rsi = (recent_rsi[-1] - min_rsi) / (max_rsi - min_rsi) * 100
        return round(stoch_rsi, 2)
    
    def get_funding_rate(self, symbol):
        """Fonlama oranƒ±nƒ± al"""
        try:
            url = f"{self.binance_futures_api}/premiumIndex"
            params = {'symbol': symbol}
            response = requests.get(url, params=params, timeout=10)
            data = response.json()
            
            if 'lastFundingRate' in data:
                return float(data['lastFundingRate'])
            return None
        except:
            return None
    
    def get_24h_stats(self, symbol):
        """24 saatlik istatistikleri al"""
        try:
            url = "https://api.binance.com/api/v3/ticker/24hr"
            params = {'symbol': symbol}
            response = requests.get(url, params=params, timeout=10)
            data = response.json()
            
            if 'volume' in data and 'count' in data:
                return {
                    'volume_change': float(data.get('priceChangePercent', 0)),
                    'volume_24h': float(data.get('volume', 0)),
                    'trade_count': int(data.get('count', 0)),
                    'price_change_24h': float(data.get('priceChangePercent', 0))
                }
            return None
        except:
            return None
    
    def calculate_btc_correlation(self, symbol_closes, btc_closes):
        """BTC ile korelasyon hesapla"""
        try:
            if not symbol_closes or not btc_closes or len(symbol_closes) < 20:
                return None
            
            # Son 20 deƒüeri al
            symbol_data = np.array(symbol_closes[-20:])
            btc_data = np.array(btc_closes[-20:])
            
            # Y√ºzde deƒüi≈üimleri hesapla
            symbol_returns = np.diff(symbol_data) / symbol_data[:-1]
            btc_returns = np.diff(btc_data) / btc_data[:-1]
            
            # Korelasyon hesapla
            correlation = np.corrcoef(symbol_returns, btc_returns)[0, 1]
            return round(correlation, 3) if not np.isnan(correlation) else None
        except:
            return None
    
    def get_market_sentiment(self):
        """Genel piyasa sentiment analizi"""
        try:
            # Bitcoin dominansƒ± ve fear & greed benzeri analiz
            url = "https://api.binance.com/api/v3/ticker/24hr"
            response = requests.get(url, timeout=10)
            data = response.json()
            
            if not data:
                return None
            
            # Genel piyasa analizi
            positive_coins = 0
            negative_coins = 0
            total_volume = 0
            
            for ticker in data:
                if ticker['symbol'].endswith('USDT'):
                    price_change = float(ticker['priceChangePercent'])
                    volume = float(ticker['volume'])
                    
                    if price_change > 0:
                        positive_coins += 1
                    else:
                        negative_coins += 1
                    
                    total_volume += volume
            
            total_coins = positive_coins + negative_coins
            if total_coins == 0:
                return None
            
            bullish_ratio = positive_coins / total_coins
            
            # Sentiment kategorisi
            if bullish_ratio > 0.6:
                sentiment = "bullish"
            elif bullish_ratio < 0.4:
                sentiment = "bearish"
            else:
                sentiment = "neutral"
            
            return {
                'sentiment': sentiment,
                'bullish_ratio': round(bullish_ratio, 3),
                'positive_coins': positive_coins,
                'negative_coins': negative_coins,
                'total_volume': total_volume
            }
        except:
            return None
    
    def get_btc_data(self):
        """BTC verilerini cache'le"""
        if self.btc_data is None:
            self.btc_data = self.get_candle_data('BTCUSDT', '1h', limit=50)
        return self.btc_data
    
    def get_volatility_index(self, closes):
        """Volatilite indeksi hesapla"""
        try:
            if len(closes) < 20:
                return None
            
            # Son 20 mumun volatilitesi
            returns = np.diff(closes[-20:]) / closes[-20:-1]
            volatility = np.std(returns) * 100
            return round(volatility, 3)
        except:
            return None
    
    def get_support_resistance(self, closes, highs, lows):
        """Destek diren√ß seviyeleri"""
        try:
            if len(closes) < 50:
                return None
            
            recent_high = max(highs[-20:])
            recent_low = min(lows[-20:])
            current_price = closes[-1]
            
            # Fiyatƒ±n destek/diren√ß arasƒ±ndaki konumu
            if recent_high == recent_low:
                position = 0.5
            else:
                position = (current_price - recent_low) / (recent_high - recent_low)
            
            return {
                'support': recent_low,
                'resistance': recent_high,
                'position': round(position, 3),  # 0-1 arasƒ±nda
                'near_support': position < 0.2,  # Desteƒüe yakƒ±n
                'near_resistance': position > 0.8  # Diren√ße yakƒ±n
            }
        except:
            return None
    
    def get_order_book_pressure(self, symbol):
        """Emir defteri baskƒ±sƒ± (basitle≈ütirilmi≈ü)"""
        try:
            url = "https://api.binance.com/api/v3/depth"
            params = {'symbol': symbol, 'limit': 100}
            response = requests.get(url, params=params, timeout=10)
            data = response.json()
            
            if 'bids' in data and 'asks' in data:
                # Alƒ±≈ü ve satƒ±≈ü derinliƒüi
                bid_volume = sum(float(bid[1]) for bid in data['bids'][:10])
                ask_volume = sum(float(ask[1]) for ask in data['asks'][:10])
                
                total_volume = bid_volume + ask_volume
                if total_volume == 0:
                    return None
                
                # Alƒ±≈ü baskƒ±sƒ± y√ºzdesi
                buy_pressure = bid_volume / total_volume
                
                return {
                    'buy_pressure': round(buy_pressure, 3),
                    'sell_pressure': round(1 - buy_pressure, 3),
                    'imbalance': 'buy' if buy_pressure > 0.6 else 'sell' if buy_pressure < 0.4 else 'balanced'
                }
            return None
        except:
            return None
    
    def analyze_candle_values(self, closes):
        """Close fiyatlarƒ±ndan MA7, MA25, MA99 hesapla ve sƒ±rala"""
        if not closes or len(closes) < 99:
            return None
        
        # Moving Average deƒüerlerini hesapla
        ma_7 = self.calculate_ma(closes, 7)
        ma_25 = self.calculate_ma(closes, 25)
        ma_99 = self.calculate_ma(closes, 99)
        
        if None in [ma_7, ma_25, ma_99]:
            return None
        
        # MA deƒüerlerini sƒ±rala (b√ºy√ºkten k√º√ß√ºƒüe)
        values = [
            (7, ma_7),
            (25, ma_25), 
            (99, ma_99)
        ]
        values.sort(key=lambda x: x[1], reverse=True)
        return [v[0] for v in values]
    
    def scan_single_coin(self, symbol):
        """Tek coin i√ßin 4 timeframe analizi"""
        try:
            coin_analysis = []
            
            for timeframe in self.timeframes:
                closes = self.get_candle_data(symbol, timeframe)
                sorted_values = self.analyze_candle_values(closes)
                coin_analysis.append(sorted_values)
            
            return coin_analysis
        except:
            return None
    
    def check_pattern_match(self, coin_analysis, symbol):
        """Database ile e≈üle≈üme kontrol√º"""
        if not coin_analysis or len(coin_analysis) != 4:
            return None
        
        for item in self.database:
            db_boxes = item.get('boxes', [])
            if len(db_boxes) != 4:
                continue
            
            # Her kutu i√ßin e≈üle≈üme kontrol√º
            match = True
            for box_idx in range(4):
                if not db_boxes[box_idx] or len(db_boxes[box_idx]) != 3:
                    continue
                
                # Database'deki deƒüerler ile coin analizini kar≈üƒ±la≈ütƒ±r
                if coin_analysis[box_idx] and len(coin_analysis[box_idx]) == 3:
                    # Sƒ±ralƒ± e≈üle≈üme kontrol√º
                    if db_boxes[box_idx] != coin_analysis[box_idx]:
                        match = False
                        break
            
            if match:
                return {
                    'crypto': item['crypto'],
                    'signal': item['result'].upper(),
                    'pattern': coin_analysis
                }
        
        return None
    
    def start_live_scan(self):
        """Canlƒ± taramayƒ± ba≈ülat"""
        if self.scanning:
            return
        
        if not self.database:
            messagebox.showwarning("‚ö†Ô∏è Uyarƒ±", "√ñnce veri tabanƒ±nƒ± doldurun!")
            return
        
        self.scanning = True
        self.scan_button.config(state='disabled')
        self.stop_button.config(state='normal')
        self.results_text.delete(1.0, tk.END)
        
        # Thread ile tarama ba≈ülat
        scan_thread = threading.Thread(target=self.live_scan_worker)
        scan_thread.daemon = True
        scan_thread.start()
    
    def stop_live_scan(self):
        """Canlƒ± taramayƒ± durdur"""
        self.scanning = False
        self.scan_button.config(state='normal')
        self.stop_button.config(state='disabled')
        self.update_status("Tarama durduruldu")
    
    def live_scan_worker(self):
        """Canlƒ± tarama i≈ü√ßi fonksiyonu"""
        self.update_status("Coin listesi alƒ±nƒ±yor...")
        crypto_list = self.get_crypto_list()
        
        if not crypto_list:
            self.scanning = False
            self.scan_button.config(state='normal')
            self.stop_button.config(state='disabled')
            return
        
        total_coins = len(crypto_list)
        scanned_count = 0
        matches_found = 0
        
        self.update_status(f"Tarama ba≈üladƒ± - {total_coins} coin")
        
        for symbol in crypto_list:
            if not self.scanning:
                break
            
            scanned_count += 1
            self.update_progress(f"Taranan: {scanned_count}/{total_coins} - E≈üle≈üme: {matches_found}")
            
            # Coin analizi
            coin_analysis = self.scan_single_coin(symbol)
            if coin_analysis:
                # Pattern e≈üle≈ümesi kontrol√º
                match_result = self.check_pattern_match(coin_analysis, symbol)
                if match_result:
                    matches_found += 1
                    self.add_result(symbol, match_result)
            
            # API rate limit i√ßin bekle
            threading.Event().wait(0.1)
        
        if self.scanning:
            self.update_status(f"Tarama tamamlandƒ± - {matches_found} e≈üle≈üme bulundu")
        
        self.scanning = False
        self.scan_button.config(state='normal')
        self.stop_button.config(state='disabled')
    
    def update_status(self, text):
        """Durum g√ºncelle"""
        if self.root:
            self.root.after(0, lambda: self.status_label.config(text=text))
        else:
            print(f"Status: {text}")
    
    def update_progress(self, text):
        """ƒ∞lerleme g√ºncelle"""
        if self.root:
            self.root.after(0, lambda: self.progress_label.config(text=text))
        else:
            print(f"Progress: {text}")
    
    def add_result(self, symbol, match_result):
        """Sonu√ß ekle"""
        def add():
            timestamp = datetime.now().strftime("%H:%M:%S")
            result_text = f"[{timestamp}] {symbol} -> {match_result['crypto']} | {match_result['signal']}\n"
            result_text += f"  Pattern: {match_result['pattern']}\n\n"
            
            self.results_text.insert(tk.END, result_text)
            self.results_text.see(tk.END)
        
        if self.root:
            self.root.after(0, add)
    
    def setup_position_ui(self, parent):
        """Pozisyon kayƒ±t aray√ºz√º"""
        tk.Label(parent, text="POZƒ∞SYON KAYIT Sƒ∞STEMƒ∞", 
                font=("Arial", 18, "bold"), bg='#f0f0f0', fg='#2c3e50').pack(pady=15)
        
        tk.Label(parent, text="Pozisyon a√ßtƒ±ƒüƒ±nda coin adƒ±nƒ± gir - T√ºm teknik verileri otomatik kaydeder", 
                font=("Arial", 12), bg='#f0f0f0', fg='#7f8c8d').pack()
        
        # Pozisyon A√ßma B√∂l√ºm√º
        open_frame = tk.LabelFrame(parent, text="POZƒ∞SYON A√á", 
                                  font=("Arial", 12, "bold"), bg='#e8f5e8', fg='#2c3e50')
        open_frame.pack(pady=20, padx=20, fill='x')
        
        input_frame = tk.Frame(open_frame, bg='#e8f5e8')
        input_frame.pack(pady=15)
        
        tk.Label(input_frame, text="Coin Adƒ± (√∂rn: BTCUSDT):", 
                font=("Arial", 12, "bold"), bg='#e8f5e8').pack(side=tk.LEFT, padx=5)
        
        self.coin_entry = tk.Entry(input_frame, font=("Arial", 12), width=15)
        self.coin_entry.pack(side=tk.LEFT, padx=10)
        
        tk.Button(input_frame, text="üìä VERƒ∞LERƒ∞ KAYDET", 
                 command=self.record_position_data,
                 font=("Arial", 12, "bold"),
                 bg='#27ae60', fg='white',
                 width=18, height=1).pack(side=tk.LEFT, padx=10)
        
        # Durum g√∂sterimi
        self.position_status = tk.Label(open_frame, text="", 
                                       font=("Arial", 10), bg='#e8f5e8', fg='#34495e')
        self.position_status.pack(pady=5)
        
        # Pozisyon Kapatma B√∂l√ºm√º
        close_frame = tk.LabelFrame(parent, text="POZƒ∞SYON KAPAT", 
                                   font=("Arial", 12, "bold"), bg='#f8e8e8', fg='#2c3e50')
        close_frame.pack(pady=20, padx=20, fill='x')
        
        result_frame = tk.Frame(close_frame, bg='#f8e8e8')
        result_frame.pack(pady=15)
        
        tk.Label(result_frame, text="A√ßƒ±k Pozisyon Se√ß:", 
                font=("Arial", 12, "bold"), bg='#f8e8e8').pack(side=tk.LEFT, padx=5)
        
        self.open_positions = ttk.Combobox(result_frame, width=15, state="readonly")
        self.open_positions.pack(side=tk.LEFT, padx=10)
        
        tk.Label(result_frame, text="Sonu√ß:", 
                font=("Arial", 12, "bold"), bg='#f8e8e8').pack(side=tk.LEFT, padx=5)
        
        self.position_result = ttk.Combobox(result_frame, values=["LONG", "SHORT"], 
                                           width=10, state="readonly")
        self.position_result.pack(side=tk.LEFT, padx=10)
        
        tk.Button(result_frame, text="‚úÖ SONUCU KAYDET", 
                 command=self.close_position,
                 font=("Arial", 12, "bold"),
                 bg='#e74c3c', fg='white',
                 width=15, height=1).pack(side=tk.LEFT, padx=10)
        
        # Kayƒ±tlƒ± Pozisyonlar
        history_frame = tk.LabelFrame(parent, text="KAYITLI POZƒ∞SYONLAR", 
                                     font=("Arial", 12, "bold"), bg='#f8f9fa', fg='#2c3e50')
        history_frame.pack(pady=20, padx=20, fill='both', expand=True)
        
        # Silme butonu
        clear_button_frame = tk.Frame(history_frame, bg='#f8f9fa')
        clear_button_frame.pack(fill='x', padx=10, pady=5)
        
        tk.Button(clear_button_frame, text="üóëÔ∏è T√úM POZƒ∞SYONLARI Sƒ∞L", 
                 command=self.clear_all_positions,
                 bg='#dc3545', fg='white', font=("Arial", 10, "bold"),
                 width=25, height=1).pack(side=tk.RIGHT)
        
        # Pozisyon listesi
        self.positions_text = tk.Text(history_frame, height=10, font=("Arial", 9))
        scrollbar_positions = tk.Scrollbar(history_frame, orient="vertical", command=self.positions_text.yview)
        self.positions_text.configure(yscrollcommand=scrollbar_positions.set)
        
        self.positions_text.pack(side="left", fill="both", expand=True)
        scrollbar_positions.pack(side="right", fill="y")
        
        # ƒ∞lk y√ºkleme
        self.update_positions_display()
        self.update_open_positions_combo()
    
    def get_comprehensive_data(self, symbol):
        """Coin i√ßin kapsamlƒ± teknik veri topla"""
        try:
            all_data = {}
            
            # Market verileri
            funding_rate = self.get_funding_rate(symbol)
            stats_24h = self.get_24h_stats(symbol)
            btc_data = self.get_btc_data()
            order_book = self.get_order_book_pressure(symbol)
            
            # Market sentiment (cache'le)
            if self.market_sentiment is None:
                self.market_sentiment = self.get_market_sentiment()
            
            for timeframe in self.timeframes:
                closes = self.get_candle_data(symbol, timeframe, limit=100)
                if not closes:
                    continue
                
                # BTC korelasyonu hesapla
                btc_correlation = None
                if btc_data and symbol != 'BTCUSDT':
                    btc_correlation = self.calculate_btc_correlation(closes, btc_data)
                
                # Ek teknik analizler
                volatility = self.get_volatility_index(closes)
                
                # High/Low verileri i√ßin basit yakla≈üƒ±m (close'dan tahmin)
                highs = [c * 1.01 for c in closes]  # Close'un %1 √ºst√º
                lows = [c * 0.99 for c in closes]   # Close'un %1 altƒ±
                support_resistance = self.get_support_resistance(closes, highs, lows)
                
                # T√ºm teknik indikat√∂rleri hesapla
                timeframe_data = {
                    'ma_7': self.calculate_ma(closes, 7),
                    'ma_25': self.calculate_ma(closes, 25), 
                    'ma_99': self.calculate_ma(closes, 99),
                    'rsi': self.calculate_rsi(closes),
                    'macd': self.calculate_macd(closes),
                    'bollinger': self.calculate_bollinger_bands(closes),
                    'stoch_rsi': self.calculate_stoch_rsi(closes),
                    'volume_avg': np.mean(closes[-20:]) if len(closes) >= 20 else None,
                    'price_current': closes[-1],
                    'ma_order': self.analyze_candle_values(closes),
                    
                    # YENƒ∞ MARKET FAKT√ñRLER
                    'funding_rate': funding_rate,
                    'stats_24h': stats_24h,
                    'btc_correlation': btc_correlation,
                    'market_sentiment': self.market_sentiment,
                    
                    # S√úPER YENƒ∞ FAKT√ñRLER
                    'volatility': volatility,
                    'support_resistance': support_resistance,
                    'order_book': order_book
                }
                
                all_data[timeframe] = timeframe_data
            
            return all_data
        except Exception as e:
            return None
    
    def record_position_data(self):
        """Pozisyon verilerini kaydet"""
        symbol = self.coin_entry.get().upper().strip()
        if not symbol:
            messagebox.showwarning("‚ö†Ô∏è Uyarƒ±", "Coin adƒ± girin!")
            return
        
        if not symbol.endswith('USDT'):
            symbol += 'USDT'
        
        self.position_status.config(text=f"{symbol} verileri alƒ±nƒ±yor...")
        
        # Thread'de veri toplama
        def collect_data():
            data = self.get_comprehensive_data(symbol)
            if data:
                position_record = {
                    'symbol': symbol,
                    'timestamp': datetime.now().isoformat(),
                    'data': data,
                    'result': None,  # Hen√ºz kapatƒ±lmadƒ±
                    'status': 'open'
                }
                
                self.positions_data.append(position_record)
                self.save_positions()
                
                if self.root:
                    self.root.after(0, lambda: self.position_status.config(
                    text=f"‚úÖ {symbol} verileri kaydedildi! ({len(data)} timeframe)"))
                self.root.after(0, self.update_positions_display)
                self.root.after(0, self.update_open_positions_combo)
                if self.root:
                    self.root.after(0, lambda: self.coin_entry.delete(0, tk.END))
            else:
                if self.root:
                    self.root.after(0, lambda: self.position_status.config(
                    text=f"‚ùå {symbol} verileri alƒ±namadƒ±!"))
        
        thread = threading.Thread(target=collect_data)
        thread.daemon = True
        thread.start()
    
    def close_position(self):
        """Pozisyonu kapat ve sonucu kaydet"""
        selected = self.open_positions.get()
        result = self.position_result.get()
        
        if not selected or not result:
            messagebox.showwarning("‚ö†Ô∏è Uyarƒ±", "Pozisyon ve sonu√ß se√ßin!")
            return
        
        # Pozisyonu bul ve g√ºncelle
        for pos in self.positions_data:
            if pos['status'] == 'open' and f"{pos['symbol']} - {pos['timestamp'][:16]}" == selected:
                pos['result'] = result.lower()
                pos['status'] = 'closed'
                pos['close_time'] = datetime.now().isoformat()
                break
        
        self.save_positions()
        self.update_positions_display()
        self.update_open_positions_combo()
        
        self.position_result.set('')
        messagebox.showinfo("‚úÖ Ba≈üarƒ±lƒ±", f"Pozisyon {result} olarak kaydedildi!")
    
    def send_telegram_message(self, text):
        """Telegram mesajƒ± g√∂nder"""
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': text,
                'parse_mode': 'HTML'
            }
            response = requests.post(url, data=data, timeout=10)
            response.raise_for_status()
            print("‚úÖ Telegram mesajƒ± g√∂nderildi")
            return True
        except Exception as e:
            print(f"‚ùå Telegram hatasƒ±: {e}")
            return False
    
    def load_positions(self):
        """Pozisyonlarƒ± y√ºkle"""
        try:
            with open(self.positions_file, 'r') as f:
                self.positions_data = json.load(f)
        except FileNotFoundError:
            self.positions_data = []
        except Exception:
            self.positions_data = []
    
    def save_positions(self):
        """Pozisyonlarƒ± kaydet"""
        try:
            with open(self.positions_file, 'w') as f:
                json.dump(self.positions_data, f, indent=2)
        except Exception as e:
            messagebox.showerror("‚ùå Hata", f"Pozisyon kaydetme hatasƒ±: {str(e)}")
    
    def update_positions_display(self):
        """Pozisyon listesini g√ºncelle"""
        if hasattr(self, 'positions_text'):
            self.positions_text.delete(1.0, tk.END)
            
            for i, pos in enumerate(reversed(self.positions_data[-20:])):  # Son 20 pozisyon
                status = "üü¢ A√áIK" if pos['status'] == 'open' else f"üî¥ {pos.get('result', 'N/A').upper()}"
                timestamp = pos['timestamp'][:16].replace('T', ' ')
                
                text = f"{i+1}. {pos['symbol']} | {timestamp} | {status}\n"
                
                if pos['status'] == 'closed':
                    # √ñzet teknik veri g√∂ster
                    timeframes_count = len(pos.get('data', {}))
                    text += f"   üìä {timeframes_count} timeframe verisi kaydedildi\n"
                
                text += "\n"
                self.positions_text.insert(tk.END, text)
    
    def update_open_positions_combo(self):
        """A√ßƒ±k pozisyonlar combo'sunu g√ºncelle"""
        if hasattr(self, 'open_positions'):
            open_pos = []
            for pos in self.positions_data:
                if pos['status'] == 'open':
                    display_text = f"{pos['symbol']} - {pos['timestamp'][:16]}"
                    open_pos.append(display_text)
            
            self.open_positions['values'] = open_pos
            if open_pos:
                self.open_positions.set(open_pos[0])
            else:
                self.open_positions.set('')
    
    def open_advanced_scan(self):
        """Kapsamlƒ± tarama penceresi a√ß"""
        advanced_window = tk.Toplevel(self.root)
        advanced_window.title("Kapsamlƒ± Kripto Tarama - T√ºm Teknik ƒ∞ndikat√∂rler")
        advanced_window.geometry("1200x900")
        advanced_window.configure(bg='#f0f0f0')
        
        # Ba≈ülƒ±k
        tk.Label(advanced_window, text="KAPSAMLI TEKNƒ∞K TARAMA", 
                font=("Arial", 18, "bold"), bg='#f0f0f0', fg='#8e44ad').pack(pady=15)
        
        tk.Label(advanced_window, text="Pozisyon kayƒ±tlarƒ±ndaki t√ºm teknik verilerle tam e≈üle≈ütirme yapar", 
                font=("Arial", 12), bg='#f0f0f0', fg='#7f8c8d').pack()
        
        # Bilgi paneli - kompakt
        info_frame = tk.LabelFrame(advanced_window, text="TARAMA KRƒ∞TERLERƒ∞", 
                                  font=("Arial", 12, "bold"), bg='#f8f9fa', fg='#2c3e50')
        info_frame.pack(pady=10, padx=20, fill='x')
        
        # Kriterler yan yana 3 s√ºtun
        criteria_columns = tk.Frame(info_frame, bg='#f8f9fa')
        criteria_columns.pack(pady=5, fill='x')
        
        # Sol s√ºtun
        left_col = tk.Frame(criteria_columns, bg='#f8f9fa')
        left_col.pack(side='left', fill='both', expand=True, padx=5)
        
        left_text = """üìä MA Sƒ±ralamasƒ± (7,25,99)
üìà RSI deƒüerleri (¬±5 tolerans)
üìâ MACD trend e≈üle≈ümesi
üéØ Bollinger Bands konumu"""
        tk.Label(left_col, text=left_text, font=("Arial", 9), 
                bg='#f8f9fa', fg='#34495e', justify='left').pack()
        
        # Orta s√ºtun
        mid_col = tk.Frame(criteria_columns, bg='#f8f9fa')
        mid_col.pack(side='left', fill='both', expand=True, padx=5)
        
        mid_text = """üíµ Fonlama oranƒ± e≈üle≈ümesi
üìà 24h fiyat deƒüi≈üimi (¬±10%)
üîó BTC korelasyon (¬±0.2)
üåê Piyasa sentiment"""
        tk.Label(mid_col, text=mid_text, font=("Arial", 9), 
                bg='#f8f9fa', fg='#34495e', justify='left').pack()
        
        # Saƒü s√ºtun
        right_col = tk.Frame(criteria_columns, bg='#f8f9fa')
        right_col.pack(side='left', fill='both', expand=True, padx=5)
        
        right_text = """üìä Volatilite indeksi
üéØ Destek/Diren√ß analizi
üìà Emir defteri baskƒ±sƒ±
‚ö° %75+ e≈üle≈üme oranƒ±"""
        tk.Label(right_col, text=right_text, font=("Arial", 9), 
                bg='#f8f9fa', fg='#34495e', justify='left').pack()
        
        # Kontrol butonlarƒ± - kompakt
        control_frame = tk.Frame(advanced_window, bg='#f0f0f0')
        control_frame.pack(pady=10)
        
        self.advanced_scan_button = tk.Button(control_frame, text="üöÄ BA≈ûLAT", 
                                             command=lambda: self.start_advanced_scan(advanced_window),
                                             font=("Arial", 12, "bold"),
                                             bg='#8e44ad', fg='white',
                                             width=15, height=1)
        self.advanced_scan_button.pack(side=tk.LEFT, padx=5)
        
        self.advanced_stop_button = tk.Button(control_frame, text="‚èπÔ∏è DURDUR", 
                                             command=lambda: self.stop_advanced_scan(advanced_window),
                                             font=("Arial", 12, "bold"),
                                             bg='#e74c3c', fg='white',
                                             width=12, height=1, state='disabled')
        self.advanced_stop_button.pack(side=tk.LEFT, padx=5)
        
        # Durum - kompakt
        status_frame = tk.LabelFrame(advanced_window, text="DURUM", 
                                    font=("Arial", 10, "bold"), bg='#f8f9fa', fg='#2c3e50')
        status_frame.pack(pady=5, padx=20, fill='x')
        
        self.advanced_status = tk.Label(status_frame, text="Hazƒ±r", 
                                       font=("Arial", 10), bg='#f8f9fa', fg='#7f8c8d')
        self.advanced_status.pack(pady=2)
        
        self.advanced_progress = tk.Label(status_frame, text="", 
                                         font=("Arial", 9), bg='#f8f9fa', fg='#34495e')
        self.advanced_progress.pack()
        
        # Sonu√ßlar - b√ºy√ºk alan
        results_frame = tk.LabelFrame(advanced_window, text="üéØ Sƒ∞NYALLER", 
                                     font=("Arial", 12, "bold"), bg='#f8f9fa', fg='#2c3e50')
        results_frame.pack(pady=5, padx=20, fill='both', expand=True)
        
        self.advanced_results = tk.Text(results_frame, height=35, font=("Arial", 9))
        advanced_scrollbar = tk.Scrollbar(results_frame, orient="vertical", command=self.advanced_results.yview)
        self.advanced_results.configure(yscrollcommand=advanced_scrollbar.set)
        
        self.advanced_results.pack(side="left", fill="both", expand=True)
        advanced_scrollbar.pack(side="right", fill="y")
        
        # Pencere kapanƒ±rken taramayƒ± durdur
        advanced_window.protocol("WM_DELETE_WINDOW", lambda: self.close_advanced_window(advanced_window))
        
        # Eƒüer pozisyon verisi yoksa uyarƒ±
        if not self.positions_data:
            tk.Label(advanced_window, text="‚ö†Ô∏è Hen√ºz pozisyon verisi yok! √ñnce 'Pozisyon Kayƒ±t' sekmesinden veri toplayƒ±n.", 
                    font=("Arial", 11, "bold"), bg='#f0f0f0', fg='#e67e22').pack(pady=5)
    
    def start_advanced_scan(self, window):
        """Kapsamlƒ± taramayƒ± ba≈ülat"""
        if not self.positions_data:
            messagebox.showwarning("‚ö†Ô∏è Uyarƒ±", "√ñnce pozisyon verisi toplayƒ±n!")
            return
        
        if hasattr(self, 'advanced_scanning') and self.advanced_scanning:
            return
        
        self.advanced_scanning = True
        self.advanced_scan_button.config(state='disabled')
        self.advanced_stop_button.config(state='normal')
        self.advanced_results.delete(1.0, tk.END)
        
        # Thread ile tarama
        scan_thread = threading.Thread(target=lambda: self.advanced_scan_worker(window))
        scan_thread.daemon = True
        scan_thread.start()
    
    def stop_advanced_scan(self, window):
        """Kapsamlƒ± taramayƒ± durdur"""
        self.advanced_scanning = False
        self.advanced_scan_button.config(state='normal')
        self.advanced_stop_button.config(state='disabled')
        self.advanced_status.config(text="Tarama durduruldu")
    
    def advanced_scan_worker(self, window):
        """Kapsamlƒ± tarama i≈ü√ßi fonksiyonu"""
        try:
            self.advanced_status.config(text="Coin listesi alƒ±nƒ±yor...")
        except:
            pass
        crypto_list = self.get_crypto_list()
        
        if not crypto_list:
            self.advanced_scanning = False
            try:
                self.advanced_scan_button.config(state='normal')
                self.advanced_stop_button.config(state='disabled')
            except:
                pass
            return
        
        # Kapalƒ± pozisyonlarƒ± filtrele (sonucu olan)
        closed_positions = [pos for pos in self.positions_data if pos['status'] == 'closed']
        
        if not closed_positions:
            try:
                self.advanced_status.config(text="‚ùå Kapalƒ± pozisyon bulunamadƒ±!")
            except:
                pass
            self.advanced_scanning = False
            try:
                self.advanced_scan_button.config(state='normal')
                self.advanced_stop_button.config(state='disabled')
            except:
                pass
            return
        
        total_coins = len(crypto_list)
        scanned_count = 0
        matches_found = 0
        
        # MARKET KO≈ûULLARI DENETƒ∞Mƒ∞
        market_warnings = self.check_market_conditions(closed_positions)
        
        # MARKET REJƒ∞Mƒ∞ DEƒûƒ∞≈ûƒ∞M KONTROL√ú
        regime_status = self.detect_market_regime_change(closed_positions)
        
        try:
            status_text = f"Kapsamlƒ± tarama ba≈üladƒ± - {total_coins} coin vs {len(closed_positions)} pozisyon\n"
            
            # Rejim durumu
            status_text += f"MARKET REJƒ∞Mƒ∞: {regime_status}\n"
            
            # Diƒüer uyarƒ±lar ve bilgiler
            additional_info = []
            
            # BTC fiyat bilgisi ekle
            try:
                btc_data = self.get_candle_data('BTCUSDT', '1h', limit=24)
                if btc_data and len(btc_data) > 1:
                    current_price = float(btc_data[-1][4])
                    prev_price = float(btc_data[-25][4])  # 24h √∂nce
                    change_24h = ((current_price - prev_price) / prev_price) * 100
                    additional_info.append(f"üìä BTC 24h: {change_24h:+.1f}%")
            except:
                pass
            
            # Volatilite bilgisi
            try:
                btc_1h = self.get_candle_data('BTCUSDT', '1h', limit=50)
                if btc_1h:
                    volatility = self.get_volatility_index(btc_1h)
                    if volatility:
                        if volatility > 3.0:
                            additional_info.append(f"‚ö†Ô∏è Y√ºksek volatilite: {volatility:.1f}%")
                        elif volatility < 1.0:
                            additional_info.append(f"üìâ D√º≈ü√ºk volatilite: {volatility:.1f}%")
                        else:
                            additional_info.append(f"üìä Normal volatilite: {volatility:.1f}%")
            except:
                pass
            
            
            # BTC Trend Tutarlƒ±lƒ±ƒüƒ± Bilgisi
            try:
                trend_ratio = self.get_trend_consistency_ratio(30)  # Yeni fonksiyon ekleyeceƒüiz
                if trend_ratio >= 0.75:
                    additional_info.append(f"‚úÖ BTC Trend Tutarlƒ±lƒ±ƒüƒ±: {trend_ratio*100:.0f}% (ƒ∞yi)")
                else:
                    additional_info.append(f"‚ö†Ô∏è BTC Trend Tutarlƒ±lƒ±ƒüƒ±: {trend_ratio*100:.0f}% (Karƒ±≈üƒ±k)")
            except:
                pass
            
            # Multi-Timeframe Onay Bilgisi  
            try:
                # Sadece bilgi i√ßin - dummy LONG ile test edelim
                tf_confirmations = self.get_multi_tf_info()  # Yeni fonksiyon ekleyeceƒüiz
                # 30dk ana odak ile yorumlama
                if tf_confirmations >= 3:
                    additional_info.append(f"‚úÖ Multi-TF (30dk odak): {tf_confirmations}/3 (M√ºkemmel)")
                elif tf_confirmations >= 2:
                    additional_info.append(f"‚ö†Ô∏è Multi-TF (30dk odak): {tf_confirmations}/3 (ƒ∞yi)")
                else:
                    additional_info.append(f"‚ùå Multi-TF (30dk odak): {tf_confirmations}/3 (Riskli)")
            except:
                pass
            
            # Trend deƒüi≈üim analizi
            try:
                # ≈ûu anki regime
                current_regime = self.get_current_market_regime()
                
                # 4 saat √∂nceki trend (yakla≈üƒ±k)
                btc_4h_ago = self.get_candle_data('BTCUSDT', '1h', limit=5)
                if btc_4h_ago and len(btc_4h_ago) >= 4:
                    # 4 saat √∂nceki fiyatlar
                    old_closes = [float(k[4]) for k in btc_4h_ago[-4:]]
                    old_ma7 = sum(old_closes) / len(old_closes)
                    old_price = old_closes[-1]
                    
                    # Basit trend belirleme
                    if old_price > old_ma7:
                        old_trend = "BULLISH"
                    else:
                        old_trend = "BEARISH"
                    
                    # Trend deƒüi≈üimi var mƒ±?
                    current_simple = "BULLISH" if "BULL" in current_regime else "BEARISH"
                    
                    if old_trend != current_simple:
                        additional_info.append(f"üîÑ Trend deƒüi≈üimi: {old_trend} ‚Üí {current_simple}")
                    else:
                        additional_info.append(f"üìà Trend sabit: {current_simple} devam ediyor")
                        
            except:
                pass
            
            # Son sinyal zamanƒ±
            try:
                import os
                if os.path.exists('/Users/merttas/signal_logs.json'):
                    with open('/Users/merttas/signal_logs.json', 'r') as f:
                        import json
                        logs = json.load(f)
                        if logs:
                            last_signal = logs[-1]
                            last_time = last_signal.get('timestamp', '')[:16].replace('T', ' ')  # YYYY-MM-DD HH:MM
                            last_signal_type = last_signal.get('signal', 'UNKNOWN')
                            additional_info.append(f"‚è∞ Son sinyal: {last_time} ({last_signal_type})")
            except:
                additional_info.append("‚è∞ Hen√ºz sinyal kaydƒ± yok")
            
            # Mevcut uyarƒ±lar varsa ekle
            if market_warnings:
                additional_info.extend(market_warnings)
            
            if additional_info:
                status_text += "Dƒ∞ƒûER Bƒ∞LGƒ∞LER:\n" + "\n".join(additional_info)
            else:
                status_text += "‚úÖ Market bilgileri y√ºkleniyor..."
                
            self.advanced_status.config(text=status_text)
        except:
            pass
        
        for symbol in crypto_list:
            if not self.advanced_scanning:
                break
            
            scanned_count += 1
            try:
                self.advanced_progress.config(text=f"Taranan: {scanned_count}/{total_coins} - E≈üle≈üme: {matches_found}")
            except:
                pass
            
            try:
                # Coin i√ßin kapsamlƒ± veri topla (timeout korumasƒ±)
                coin_data = None
                try:
                    coin_data = self.get_comprehensive_data(symbol)
                except:
                    # API timeout - coin'i atla
                    continue
                    
                if coin_data:
                    # SADECE POZƒ∞SYON E≈ûLE≈ûMESƒ∞ - Dosyadan
                    match_result = self.analyze_hybrid_signal(coin_data, symbol)
                    if match_result and match_result.get('match_percentage', 0) >= 75:  # Minimum %75 e≈üle≈üme
                        matches_found += 1
                        self.add_advanced_result(symbol, match_result, coin_data)
                    
            except Exception as e:
                # Hata durumunda sadece devam et
                continue
            
            # Optimize rate limiting - daha hƒ±zlƒ±
            if scanned_count % 10 == 0:
                threading.Event().wait(1.0)  # 10'da bir 1 saniye bekle
            else:
                threading.Event().wait(0.2)  # Normal 0.2 saniye
        
        if self.advanced_scanning:
            try:
                self.advanced_status.config(text=f"Kapsamlƒ± tarama tamamlandƒ± - {matches_found} tam e≈üle≈üme")
            except:
                pass  # Pencere kapalƒ±ysa hata verme
        
        self.advanced_scanning = False
        try:
            self.advanced_scan_button.config(state='normal')
            self.advanced_stop_button.config(state='disabled')
        except:
            pass  # Pencere kapalƒ±ysa hata verme
    
    def check_market_conditions(self, positions):
        """Market ko≈üullarƒ±nƒ± denetim - pozisyon zamanlarƒ± vs ≈üimdi"""
        from datetime import datetime, timedelta
        
        warnings = []
        now = datetime.now()
        
        # 1. VOLATILITE DEƒûƒ∞≈ûƒ∞Mƒ∞ - BTC bazlƒ±
        try:
            current_btc = self.get_candle_data('BTCUSDT', '1h', limit=24)
            if current_btc:
                current_volatility = self.get_volatility_index(current_btc)
                
                # Eski pozisyon volatilitesi ortalama
                old_volatilities = []
                for pos in positions[:5]:  # Son 5 pozisyon
                    pos_data = pos.get('data', {})
                    if '1h' in pos_data:
                        old_vol = pos_data['1h'].get('volatility')
                        if old_vol:
                            old_volatilities.append(old_vol)
                
                if old_volatilities and current_volatility:
                    avg_old_vol = sum(old_volatilities) / len(old_volatilities)
                    vol_change = abs(current_volatility - avg_old_vol) / avg_old_vol
                    
                    if vol_change > 0.5:  # %50+ volatilite deƒüi≈üimi
                        warnings.append(f"‚ö†Ô∏è VOLATƒ∞Lƒ∞TE DEƒûƒ∞≈ûƒ∞Mƒ∞: %{vol_change*100:.0f} (Pattern g√ºvenilirliƒüi d√º≈ü√ºk)")
        except:
            pass
        
        # 2. MARKET SENTIMENT DEƒûƒ∞≈ûƒ∞Mƒ∞
        try:
            current_sentiment = self.get_market_sentiment()
            if current_sentiment:
                # Eski pozisyonlardaki sentiment
                old_sentiments = []
                for pos in positions[:5]:
                    pos_data = pos.get('data', {})
                    if '1m' in pos_data:
                        old_sent = pos_data['1m'].get('market_sentiment')
                        if old_sent:
                            old_sentiments.append(old_sent.get('sentiment'))
                
                if old_sentiments:
                    old_sentiment_mode = max(set(old_sentiments), key=old_sentiments.count)
                    if current_sentiment['sentiment'] != old_sentiment_mode:
                        warnings.append(f"‚ö†Ô∏è SENTIMENT DEƒûƒ∞≈ûƒ∞Mƒ∞: {old_sentiment_mode} ‚Üí {current_sentiment['sentiment']}")
        except:
            pass
        
        # 3. ZAMAN Dƒ∞Lƒ∞Mƒ∞ KONTROL√ú
        try:
            current_hour = now.hour
            for pos in positions[:3]:
                pos_time = datetime.fromisoformat(pos['timestamp'])
                pos_hour = pos_time.hour
                hour_diff = abs(current_hour - pos_hour)
                
                # 6+ saat fark varsa uyar
                if hour_diff >= 6:
                    warnings.append(f"‚ö†Ô∏è ZAMAN Dƒ∞Lƒ∞Mƒ∞ FARKI: {hour_diff}h (Likidite farklƒ±lƒ±ƒüƒ± olabilir)")
                    break
        except:
            pass
        
        # 4. TREND DEƒûƒ∞≈ûƒ∞Mƒ∞ - BTC MA durumu
        try:
            current_btc = self.get_candle_data('BTCUSDT', '4h', limit=100)
            if current_btc:
                current_ma_order = self.analyze_candle_values(current_btc)
                
                # Eski BTC trend
                for pos in positions[:3]:
                    if pos['symbol'] == 'BTCUSDT':
                        pos_data = pos.get('data', {})
                        if '4h' in pos_data:
                            old_ma_order = pos_data['4h'].get('ma_order')
                            if old_ma_order and current_ma_order != old_ma_order:
                                warnings.append(f"‚ö†Ô∏è BTC TREND DEƒûƒ∞≈ûƒ∞Mƒ∞: {old_ma_order} ‚Üí {current_ma_order}")
                            break
                        break
        except:
            pass
        
        return warnings
    
    def detect_market_regime_change(self, positions):
        """Market rejimi deƒüi≈üimini tespit et - Trend vs Range vs Reversal"""
        try:
            # BTC'den market rejimi analizi (retry ile)
            current_btc_1h = None
            current_btc_4h = None
            
            # 3 kere dene
            for attempt in range(3):
                current_btc_1h = self.get_candle_data('BTCUSDT', '1h', limit=50)
                if current_btc_1h:
                    break
                threading.Event().wait(2)  # 2 saniye bekle
            
            for attempt in range(3):
                current_btc_4h = self.get_candle_data('BTCUSDT', '4h', limit=30)
                if current_btc_4h:
                    break
                threading.Event().wait(2)
            
            if not current_btc_1h or not current_btc_4h:
                # BTC verisi yoksa basit rejim tespiti
                return self.simple_regime_detection(positions)
            
            # ≈ûimdiki rejim analizi
            current_regime = self.analyze_market_regime(current_btc_1h, current_btc_4h)
            
            # Eski pozisyonlardaki rejim (ortalama)
            old_regimes = []
            for pos in positions[:5]:  # Son 5 pozisyon
                pos_data = pos.get('data', {})
                if 'BTCUSDT' in str(pos.get('symbol', '')):
                    # BTC pozisyonu varsa o zamanki veriyi kullan
                    if '1h' in pos_data and '4h' in pos_data:
                        old_regime = self.get_regime_from_position_data(pos_data)
                        if old_regime:
                            old_regimes.append(old_regime)
            
            if not old_regimes:
                return "‚ö†Ô∏è Eski rejim verisi yok"
            
            # En yaygƒ±n eski rejim
            old_regime_mode = max(set(old_regimes), key=old_regimes.count)
            
            # Rejim deƒüi≈üimi kontrol√º
            if current_regime != old_regime_mode:
                confidence = self.calculate_regime_confidence(current_btc_1h, current_btc_4h)
                return f"üö® MARKET REJƒ∞Mƒ∞ DEƒûƒ∞≈ûTƒ∞: {old_regime_mode} ‚Üí {current_regime} (G√ºven: %{confidence})"
            else:
                return f"‚úÖ Market rejimi stabil: {current_regime}"
                
        except Exception as e:
            return f"‚ùå Rejim analizi hatasƒ±: {str(e)}"
    
    def simple_regime_detection(self, positions):
        """BTC verisi olmadan basit rejim tespiti"""
        try:
            # Son pozisyonlarƒ±n sonu√ßlarƒ±na bak
            recent_results = []
            for pos in positions[:10]:  # Son 10 pozisyon
                result = pos.get('result', '').lower()
                if result in ['long', 'short']:
                    recent_results.append(result)
            
            if not recent_results:
                return "‚ö†Ô∏è Pozisyon verisi yetersiz"
            
            # Kazanma oranlarƒ±
            long_count = recent_results.count('long')
            short_count = recent_results.count('short')
            total = len(recent_results)
            
            long_ratio = long_count / total
            
            # GER√áEK ZAMANLI MARKET REJƒ∞Mƒ∞
            current_regime = self.get_current_market_regime()
            
            if current_regime == "BULL_TREND":
                return f"‚úÖ Rejim: BULL_TREND (BTC MA7>MA25>MA99 - Y√ºkseli≈ü trendi)"
            elif current_regime == "BEAR_TREND":
                return f"‚úÖ Rejim: BEAR_TREND (BTC MA99>MA25>MA7 - D√º≈ü√º≈ü trendi)"
            elif current_regime == "RANGE_MARKET":
                return f"‚ö†Ô∏è Rejim: RANGE_MARKET (BTC yatay hareket - Trend belirsiz)"
            else:
                return f"‚ùå Rejim: UNKNOWN (BTC verisi alƒ±namadƒ±)"
                
        except:
            return "‚ùå Basit rejim tespiti hatasƒ±"
    
    def analyze_market_regime(self, btc_1h, btc_4h):
        """BTC verilerinden market rejimini belirle"""
        try:
            # 1. TREND ANALƒ∞Zƒ∞ (MA'lar)
            ma_7 = self.calculate_ma(btc_4h, 7)
            ma_25 = self.calculate_ma(btc_4h, 25)
            ma_99 = self.calculate_ma(btc_4h, 99)
            
            if None in [ma_7, ma_25, ma_99]:
                return "UNKNOWN"
            
            # MA sƒ±ralamasƒ±
            if ma_7 > ma_25 > ma_99:
                trend_direction = "BULLISH"
            elif ma_99 > ma_25 > ma_7:
                trend_direction = "BEARISH"
            else:
                trend_direction = "SIDEWAYS"
            
            # 2. VOLATƒ∞Lƒ∞TE ANALƒ∞Zƒ∞
            volatility = self.get_volatility_index(btc_1h)
            
            if volatility and volatility > 3.0:  # Y√ºksek volatilite
                vol_state = "HIGH_VOL"
            elif volatility and volatility < 1.0:  # D√º≈ü√ºk volatilite
                vol_state = "LOW_VOL"
            else:
                vol_state = "NORMAL_VOL"
            
            # 3. MOMENTUM ANALƒ∞Zƒ∞ (RSI)
            rsi = self.calculate_rsi(btc_1h)
            
            if rsi and rsi > 70:
                momentum = "OVERBOUGHT"
            elif rsi and rsi < 30:
                momentum = "OVERSOLD"
            else:
                momentum = "NEUTRAL"
            
            # 4. REJƒ∞M BELƒ∞RLEME
            if trend_direction == "BULLISH" and vol_state in ["NORMAL_VOL", "LOW_VOL"]:
                return "BULL_TREND"
            elif trend_direction == "BEARISH" and vol_state in ["NORMAL_VOL", "LOW_VOL"]:
                return "BEAR_TREND"
            elif vol_state == "HIGH_VOL" and momentum in ["OVERBOUGHT", "OVERSOLD"]:
                return "REVERSAL_ZONE"
            elif trend_direction == "SIDEWAYS" and vol_state == "LOW_VOL":
                return "RANGE_MARKET"
            else:
                return "TRANSITION"
                
        except:
            return "ERROR"
    
    def get_current_market_regime(self):
        """GER√áEK ZAMANLI BTC'den trend tespit et"""
        try:
            # G√ºncel BTC 15m verisi √ßek (√ßok kƒ±sa vadeli)
            btc_4h = self.get_candle_data('BTCUSDT', '15m', limit=100)
            if not btc_4h:
                return "UNKNOWN"
                
            # MA'larƒ± hesapla
            ma_7 = self.calculate_ma(btc_4h, 7)
            ma_25 = self.calculate_ma(btc_4h, 25) 
            ma_99 = self.calculate_ma(btc_4h, 99)
            
            if None in [ma_7, ma_25, ma_99]:
                return "UNKNOWN"
            
            # MA sƒ±ralamasƒ± belirle
            if ma_7 > ma_25 > ma_99:
                return "BULL_TREND"
            elif ma_99 > ma_25 > ma_7:
                return "BEAR_TREND"
            else:
                return "RANGE_MARKET"
                
        except:
            return "UNKNOWN"
    
    def calculate_regime_confidence(self, btc_1h, btc_4h):
        """Rejim deƒüi≈üimi g√ºven seviyesi (0-100)"""
        try:
            confidence = 50  # Base
            
            # Volume konfirmasyonu
            recent_volume = sum(btc_1h[-5:]) / 5 if len(btc_1h) >= 5 else 0
            avg_volume = sum(btc_1h[-20:]) / 20 if len(btc_1h) >= 20 else 0
            
            if recent_volume > avg_volume * 1.5:  # Y√ºksek volume
                confidence += 20
            elif recent_volume < avg_volume * 0.7:  # D√º≈ü√ºk volume
                confidence -= 15
            
            # Momentum konfirmasyonu
            rsi = self.calculate_rsi(btc_1h)
            if rsi:
                if 30 < rsi < 70:  # Neutral zone
                    confidence += 10
                else:  # Extreme zones
                    confidence += 15
            
            return min(max(confidence, 0), 100)
        except:
            return 50
    
    def analyze_hybrid_signal(self, coin_data, symbol):
        """SADECE POZƒ∞SYON E≈ûLE≈ûMESƒ∞ - trading_positions.json dosyasƒ±ndan"""
        try:
            # SADECE POZƒ∞SYON E≈ûLE≈ûMESƒ∞ KONTROL ET
            position_match = self.find_position_match(coin_data, symbol)
            
            if position_match:
                # Pozisyon e≈üle≈ütirme bulundu - Orijinal sinyali d√∂nd√ºr
                return position_match
            else:
                # Pozisyon e≈üle≈ütirme yok - Hi√ß sinyal verme
                return None
                
        except Exception as e:
            # Hata durumunda sinyal verme
            return None

    def find_position_match(self, coin_data, symbol):
        """POZƒ∞SYON E≈ûLE≈ûMESƒ∞ BULMA - Orijinal algoritma"""
        try:
            # Kayƒ±tlƒ± pozisyonlarƒ± y√ºkle
            try:
                with open('/Users/merttas/trading_positions.json', 'r', encoding='utf-8') as f:
                    saved_positions = json.load(f)
            except Exception as e:
                return None
            
            if not saved_positions:
                return None
            
            # T√úM POZƒ∞SYONLARI KONTROL ET - ZAMaN Fƒ∞LTRESƒ∞ YOK
            recent_positions = saved_positions
            
            if not recent_positions:
                return None
            
            # T√úM POZƒ∞SYONLAR ARASƒ±NDA ARAMA (Cross-pair)
            best_match = None
            best_score = 0
            matched_coin = None
            
            for pos in recent_positions:
                match_result = self.calculate_match_score(coin_data, pos)
                score = match_result.get('score', 0)
                
                if score > best_score and score >= 75:  # Minimum %75 e≈üle≈üme
                    best_score = score
                    best_match = pos
                    best_details = match_result
                    matched_coin = pos.get('symbol', 'Unknown')
            
            if best_match:
                # Cross-pair formatƒ±: Taranan-E≈üle≈üen
                cross_pair = f"{symbol.replace('USDT', '')}-{matched_coin.replace('USDT', '')}"
                
                # BTC trend durumunu al
                try:
                    btc_trend = self.get_current_market_regime()
                    
                    # 30 DAKƒ∞KA TREND TUTARLILIƒûI KONTROL√ú
                    trend_consistent = self.check_trend_consistency(30)  # 30 dakika
                    
                    # √áOK TIMEFRAME ONAY Sƒ∞STEMƒ∞
                    multi_tf_confirmed = self.check_multi_timeframe_confirmation(best_match.get('result', 'LONG').upper())
                    
                except:
                    btc_trend = "UNKNOWN"
                    trend_consistent = False
                    multi_tf_confirmed = False
                
                # MULTI-TIMEFRAME KONTROL√ú - 3/3 sinyal i√ßin
                if multi_tf_confirmed and self.get_multi_tf_info() < 3:
                    print(f"‚ö†Ô∏è Multi-TF onayƒ± yetersiz: {self.get_multi_tf_info()}/3 - {symbol} sinyali engellendi")
                    return None
                
                # POZƒ∞SYON KALƒ∞TESƒ∞ KONTROL√ú
                position_quality = self.check_position_quality(best_match, best_score)
                if not position_quality['is_high_quality']:
                    print(f"‚ö†Ô∏è Pozisyon kalitesi d√º≈ü√ºk - {symbol} sinyali engellendi: {position_quality['reason']}")
                    return None
                
                # SIGNAL LOG KAYDI
                signal_log = {
                    'timestamp': datetime.now().isoformat(),
                    'scanned_symbol': symbol,
                    'signal': best_match.get('result', 'LONG').upper(),
                    'match_percentage': best_score,
                    'matched_position': {
                        'symbol': matched_coin,
                        'timestamp': best_match.get('timestamp', ''),
                        'close_time': best_match.get('close_time', '')
                    },
                    'btc_trend': btc_trend,
                    'trend_consistent': trend_consistent,
                    'multi_tf_confirmed': multi_tf_confirmed,
                    'position_quality': position_quality,
                    'factors_matched': best_details.get('factors_matched', 0),
                    'match_details': best_details.get('details', ''),
                    'cross_pair': cross_pair
                }
                
                # Log dosyasƒ±na kaydet
                self.save_signal_log(signal_log)
                
                return {
                    'signal': best_match.get('result', 'LONG').upper(),
                    'match_percentage': best_score,
                    'pattern': f"Cross-Pair: {cross_pair}",
                    'match_details': f"{best_details.get('details', 'Pattern match')} | Kalite: {best_details.get('quality', 'GOOD')} ({best_score:.1f}%)",
                    'matched_symbol': matched_coin,
                    'cross_pair': cross_pair,
                    'position_timestamp': best_match.get('timestamp', ''),
                    'total_factors': best_details.get('factors_matched', 0)
                }
            
            return None
            
        except Exception as e:
            return None

    def save_signal_log(self, signal_log):
        """Signal log dosyasƒ±na kaydet"""
        try:
            log_file = '/Users/merttas/signal_logs.json'
            
            # Mevcut loglarƒ± oku
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    logs = json.load(f)
            except FileNotFoundError:
                logs = []
            
            # Yeni log ekle
            logs.append(signal_log)
            
            # Son 1000 kaydƒ± tut (dosya b√ºy√ºmesin)
            if len(logs) > 1000:
                logs = logs[-1000:]
            
            # Dosyaya kaydet
            with open(log_file, 'w', encoding='utf-8') as f:
                json.dump(logs, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            print(f"Log kaydetme hatasƒ±: {e}")

    def check_trend_consistency(self, minutes=30):
        """Son N dakika trend tutarlƒ±lƒ±ƒüƒ±nƒ± kontrol et"""
        try:
            # BTC i√ßin son N dakika verilerini al
            interval = '1m'
            limit = minutes
            
            url = f"https://api.binance.com/api/v3/klines"
            params = {
                'symbol': 'BTCUSDT',
                'interval': interval,
                'limit': limit
            }
            
            response = requests.get(url, params=params, timeout=10)
            if response.status_code != 200:
                return False
                
            klines = response.json()
            if not klines or len(klines) < minutes:
                return False
            
            # Her dakika i√ßin trend y√∂n√ºn√º belirle
            trends = []
            
            for i in range(len(klines) - 7):  # MA7 hesabƒ± i√ßin
                # Son 7 mumun MA'sƒ±nƒ± hesapla
                recent_closes = [float(klines[j][4]) for j in range(i, i + 7)]
                ma_7 = sum(recent_closes) / 7
                
                current_close = float(klines[i + 6][4])
                
                # Basit trend belirleme
                if current_close > ma_7:
                    trends.append('BULL')
                else:
                    trends.append('BEAR')
            
            if not trends:
                return False
            
            # Trend tutarlƒ±lƒ±ƒüƒ± kontrol et - %80+ aynƒ± y√∂nde olmalƒ±
            bull_count = trends.count('BULL')
            bear_count = trends.count('BEAR')
            total_count = len(trends)
            
            consistency_ratio = max(bull_count, bear_count) / total_count
            
            return consistency_ratio >= 0.75  # %75+ tutarlƒ±lƒ±k
            
        except Exception as e:
            return False

    def check_multi_timeframe_confirmation(self, signal_direction):
        """Birden fazla timeframe'de sinyal onayƒ± kontrol et"""
        try:
            # BTC i√ßin farklƒ± timeframe'lerde trend kontrol et
            timeframes = ['5m', '15m', '30m', '1h']
            confirmations = []
            
            for tf in timeframes:
                try:
                    url = f"https://api.binance.com/api/v3/klines"
                    params = {
                        'symbol': 'BTCUSDT',
                        'interval': tf,
                        'limit': 100  # MA99 i√ßin
                    }
                    
                    response = requests.get(url, params=params, timeout=10)
                    if response.status_code != 200:
                        continue
                        
                    klines = response.json()
                    if not klines or len(klines) < 99:
                        continue
                    
                    # MA hesapla
                    closes = [float(k[4]) for k in klines]
                    current_price = closes[-1]
                    
                    ma_7 = sum(closes[-7:]) / 7
                    ma_25 = sum(closes[-25:]) / 25
                    ma_99 = sum(closes[-99:]) / 99
                    
                    # Trend y√∂n√º belirle
                    if ma_7 > ma_25 > ma_99 and current_price > ma_7:
                        tf_trend = 'LONG'
                    elif ma_99 > ma_25 > ma_7 and current_price < ma_7:
                        tf_trend = 'SHORT'
                    else:
                        tf_trend = 'NEUTRAL'
                    
                    # Sinyal ile uyumlu mu?
                    if tf_trend == signal_direction:
                        confirmations.append(True)
                    else:
                        confirmations.append(False)
                        
                except Exception:
                    confirmations.append(False)
            
            # En az 3/4 timeframe onayƒ± gerekli
            confirmation_ratio = sum(confirmations) / len(confirmations) if confirmations else 0
            return confirmation_ratio >= 0.75  # %75+ onay
            
        except Exception as e:
            return False

    def get_trend_consistency_ratio(self, minutes=30):
        """Trend tutarlƒ±lƒ±k oranƒ±nƒ± d√∂nd√ºr (bilgi ama√ßlƒ±)"""
        try:
            # Mevcut check_trend_consistency fonksiyonunu kullan ama oranƒ± d√∂nd√ºr
            url = f"https://api.binance.com/api/v3/klines"
            params = {
                'symbol': 'BTCUSDT',
                'interval': '1m',
                'limit': minutes
            }
            
            response = requests.get(url, params=params, timeout=10)
            if response.status_code != 200:
                return 0.0
                
            klines = response.json()
            if not klines or len(klines) < minutes:
                return 0.0
            
            # Her dakika i√ßin trend y√∂n√ºn√º belirle
            trends = []
            for i in range(len(klines) - 7):
                recent_closes = [float(klines[j][4]) for j in range(i, i + 7)]
                ma_7 = sum(recent_closes) / 7
                current_close = float(klines[i + 6][4])
                
                if current_close > ma_7:
                    trends.append('BULL')
                else:
                    trends.append('BEAR')
            
            if not trends:
                return 0.0
            
            bull_count = trends.count('BULL')
            bear_count = trends.count('BEAR')
            total_count = len(trends)
            
            return max(bull_count, bear_count) / total_count
            
        except:
            return 0.0

    def get_multi_tf_info(self):
        """Multi-timeframe onay sayƒ±sƒ±nƒ± d√∂nd√ºr (bilgi ama√ßlƒ±)"""
        try:
            timeframes = ['5m', '30m', '1h']  # 3/3 sistem
            bull_confirmations = 0
            
            for tf in timeframes:
                try:
                    url = f"https://api.binance.com/api/v3/klines"
                    params = {
                        'symbol': 'BTCUSDT',
                        'interval': tf,
                        'limit': 100
                    }
                    
                    response = requests.get(url, params=params, timeout=10)
                    if response.status_code != 200:
                        continue
                        
                    klines = response.json()
                    if not klines or len(klines) < 99:
                        continue
                    
                    closes = [float(k[4]) for k in klines]
                    current_price = closes[-1]
                    
                    ma_7 = sum(closes[-7:]) / 7
                    ma_25 = sum(closes[-25:]) / 25
                    ma_99 = sum(closes[-99:]) / 99
                    
                    # BULLISH trend kontrol
                    if ma_7 > ma_25 > ma_99 and current_price > ma_7:
                        bull_confirmations += 1
                        
                except:
                    continue
                    
            return bull_confirmations
            
        except:
            return 0

    def check_position_quality(self, position, match_score):
        """Pozisyon kalitesini kontrol et"""
        try:
            reasons = []
            is_high_quality = True
            
            # 1. SKOR KALƒ∞TESƒ∞ - %75 altƒ± ≈ü√ºpheli
            if match_score < 75:
                reasons.append(f"D√º≈ü√ºk skor: {match_score:.1f}%")
                is_high_quality = False
            
            # 2. POZƒ∞SYON YA≈ûI - 7 g√ºnden eski ≈ü√ºpheli
            try:
                pos_time = datetime.fromisoformat(position.get('timestamp', '').replace('Z', '+00:00'))
                age_days = (datetime.now() - pos_time.replace(tzinfo=None)).days
                
                if age_days > 7:
                    reasons.append(f"√áok eski pozisyon: {age_days} g√ºn")
                    is_high_quality = False
            except:
                reasons.append("Pozisyon tarihi belirsiz")
                is_high_quality = False
            
            # 3. POZƒ∞SYON S√úRESƒ∞ - √áok kƒ±sa pozisyonlar ≈ü√ºpheli
            try:
                open_time = datetime.fromisoformat(position.get('timestamp', '').replace('Z', '+00:00'))
                close_time = datetime.fromisoformat(position.get('close_time', '').replace('Z', '+00:00'))
                
                duration_minutes = (close_time - open_time).total_seconds() / 60
                
                if duration_minutes < 30:  # 30 dakikadan kƒ±sa
                    reasons.append(f"√áok kƒ±sa pozisyon: {duration_minutes:.0f} dk")
                    is_high_quality = False
            except:
                pass  # Close time yoksa kontrol etme
            
            # 4. MAJOR COIN KONTROL√ú - Major coinlerden e≈üle≈üme daha g√ºvenilir
            major_coins = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'XRPUSDT', 'ADAUSDT']
            pos_symbol = position.get('symbol', '')
            
            if pos_symbol not in major_coins:
                reasons.append(f"Minor coin e≈üle≈ümesi: {pos_symbol}")
                # Minor coin i√ßin skor kriterini artƒ±r
                if match_score < 75:
                    is_high_quality = False
            
            return {
                'is_high_quality': is_high_quality,
                'reasons': reasons,
                'reason': ' | '.join(reasons) if reasons else 'Kalite kontrolleri ge√ßti'
            }
            
        except Exception as e:
            return {
                'is_high_quality': False,
                'reasons': [f"Kalite kontrol hatasƒ±: {str(e)}"],
                'reason': f"Kalite kontrol hatasƒ±: {str(e)}"
            }

    def get_category_positions(self, symbol, positions):
        """Coin kategorisine g√∂re pozisyonlarƒ± filtrele"""
        major_coins = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'XRPUSDT', 'ADAUSDT', 'SOLUSDT']
        defi_coins = ['UNIUSDT', 'AAVEUSDT', 'COMPUSDT', 'SUSHIUSDT', 'LINKUSDT']
        layer1_coins = ['NEARUSDT', 'FTMUSDT', 'ALGOUSDT', 'ONEUSDT']
        meme_coins = ['DOGEUSDT', '1000PEPEUSDT', 'SHIBUSDT', 'WIFUSDT']
        
        if symbol in major_coins:
            return [pos for pos in positions if pos['symbol'] in major_coins]
        elif symbol in defi_coins:
            return [pos for pos in positions if pos['symbol'] in defi_coins]
        elif symbol in layer1_coins:
            return [pos for pos in positions if pos['symbol'] in layer1_coins]
        elif symbol in meme_coins:
            return [pos for pos in positions if pos['symbol'] in meme_coins]
        else:
            # Otomatik kategori - t√ºm pozisyonlarƒ± dene
            return positions

    def calculate_match_score(self, current_data, position_data):
        """44 FAKT√ñR Sƒ∞STEMƒ∞ - 4 timeframe x 11 kriter"""
        try:
            # ZAMAN Dƒ∞Lƒ∞MLERƒ∞: 1dk, 3dk, 5dk, 30dk
            timeframes = ['1m', '3m', '5m', '30m']
            
            # Position data'nƒ±n ger√ßek yapƒ±sƒ±nƒ± kontrol et
            pos_data_root = position_data.get('data', position_data)  # Asƒ±l veri 'data' i√ßinde olabilir
            
            # MA VALIDATION %100 - 4 TIMEFRAME Bƒ∞REBƒ∞R E≈ûLE≈ûME
            ma_check_passed = True
            
            for tf in timeframes:
                tf_data = current_data.get(tf, {})
                pos_tf_data = pos_data_root.get(tf, pos_data_root) if isinstance(pos_data_root, dict) else {}
                
                current_ma = tf_data.get('ma_order', [])
                position_ma = pos_tf_data.get('ma_order', [])
                
                # MA sƒ±ralamasƒ± tam e≈üle≈ümiyorsa RED
                if current_ma != position_ma or len(current_ma) != 3:
                    ma_check_passed = False
                    break
            
            # MA'lar e≈üle≈ümiyorsa hi√ß skor verme
            if not ma_check_passed:
                return {'score': 0, 'quality': 'POOR', 'details': 'MA sƒ±ralamasƒ± e≈üle≈ümiyor', 'factors_matched': 0}
            
            total_score = 0
            total_factors = 0
            match_details = []
            
            for tf in timeframes:
                tf_data = current_data.get(tf, {})
                # Position data'dan timeframe verisi al
                pos_tf_data = pos_data_root.get(tf, pos_data_root) if isinstance(pos_data_root, dict) else {}
                
                # 1. MA SIRALAMASI (2.27 puan)
                current_ma = tf_data.get('ma_order', [])
                position_ma = pos_tf_data.get('ma_order', [])
                
                if current_ma == position_ma and len(current_ma) == 3:
                    total_score += 2.27
                    match_details.append(f"‚úÖ {tf} MA e≈üle≈üme")
                total_factors += 1
                
                # 2. RSI DEƒûERLERƒ∞ (2.27 puan) - ¬±5 tolerans
                current_rsi = tf_data.get('rsi', 50)
                position_rsi = pos_tf_data.get('rsi', 50)
                
                if abs(current_rsi - position_rsi) <= 5:
                    total_score += 2.27
                    match_details.append(f"‚úÖ {tf} RSI yakƒ±n")
                total_factors += 1
                
                # 3. MACD TREND (2.27 puan)
                current_macd = tf_data.get('macd_trend', 'neutral')
                position_macd = pos_tf_data.get('macd_trend', 'neutral')
                
                if current_macd == position_macd:
                    total_score += 2.27
                    match_details.append(f"‚úÖ {tf} MACD e≈üle≈üme")
                total_factors += 1
                
                # 4. BOLLINGER BANDS (2.27 puan)
                current_bb = tf_data.get('bb_position', 'middle')
                position_bb = pos_tf_data.get('bb_position', 'middle')
                
                if current_bb == position_bb:
                    total_score += 2.27
                    match_details.append(f"‚úÖ {tf} Bollinger e≈üle≈üme")
                total_factors += 1
                
                # 5. FONLAMA ORANI (2.27 puan)
                current_funding = tf_data.get('funding_rate', position_data.get('funding_rate', 0))
                position_funding = pos_tf_data.get('funding_rate', position_data.get('funding_rate', 0))
                
                if abs(current_funding - position_funding) <= 0.01:
                    total_score += 2.27
                    match_details.append(f"‚úÖ {tf} Funding e≈üle≈üme")
                total_factors += 1
                
                # 6. 24H Fƒ∞YAT DEƒûƒ∞≈ûƒ∞Mƒ∞ (2.27 puan) - ¬±10% tolerans
                current_change = tf_data.get('price_change_24h', 0)
                position_change = pos_tf_data.get('price_change_24h', 0)
                
                if abs(current_change - position_change) <= 10:
                    total_score += 2.27
                    match_details.append(f"‚úÖ {tf} Fiyat deƒüi≈üimi e≈üle≈üme")
                total_factors += 1
                
                # 7. BTC KORELASYON (2.27 puan) - ¬±0.2 tolerans
                current_corr = tf_data.get('btc_correlation', 0) or 0
                position_corr = pos_tf_data.get('btc_correlation', 0) or 0
                
                if abs(current_corr - position_corr) <= 0.2:
                    total_score += 2.27
                    match_details.append(f"‚úÖ {tf} BTC korelasyon e≈üle≈üme")
                total_factors += 1
                
                # 8. Pƒ∞YASA SENTIMENT (2.27 puan)
                current_sentiment = tf_data.get('market_sentiment', 'neutral')
                position_sentiment = pos_tf_data.get('market_sentiment', 'neutral')
                
                if current_sentiment == position_sentiment:
                    total_score += 2.27
                    match_details.append(f"‚úÖ {tf} Sentiment e≈üle≈üme")
                total_factors += 1
                
                # 9. VOLATƒ∞Lƒ∞TE ƒ∞NDEKSƒ∞ (2.27 puan)
                current_vol = tf_data.get('volatility', 0) or 0
                position_vol = pos_tf_data.get('volatility', 0) or 0
                
                if abs(current_vol - position_vol) <= 1.0:
                    total_score += 2.27
                    match_details.append(f"‚úÖ {tf} Volatilite e≈üle≈üme")
                total_factors += 1
                
                # 10. DESTEK/Dƒ∞REN√á ANALƒ∞Zƒ∞ (2.27 puan)
                current_sr = tf_data.get('support_resistance', 'middle')
                position_sr = pos_tf_data.get('support_resistance', 'middle')
                
                if current_sr == position_sr:
                    total_score += 2.27
                    match_details.append(f"‚úÖ {tf} S/R e≈üle≈üme")
                total_factors += 1
                
                # 11. EMƒ∞R DEFTERƒ∞ BASKISI (2.27 puan)
                current_ob = tf_data.get('order_book_pressure', 'neutral')
                position_ob = pos_tf_data.get('order_book_pressure', 'neutral')
                
                if current_ob == position_ob:
                    total_score += 2.27
                    match_details.append(f"‚úÖ {tf} Order Book e≈üle≈üme")
                total_factors += 1
            
            # SKOR HESAPLA (max 100)
            final_score = min(total_score, 100)
            matched_factors = len(match_details)
            
            
            # KALƒ∞TE BELƒ∞RLE
            if final_score >= 80:
                quality = "EXCELLENT"
            elif final_score >= 70:
                quality = "VERY_GOOD"  
            elif final_score >= 60:
                quality = "GOOD"
            elif final_score >= 50:
                quality = "FAIR"
            else:
                quality = "POOR"
            
            return {
                'score': final_score,
                'quality': quality,
                'details': ' | '.join(match_details),
                'factors_matched': matched_factors,
                'total_possible': 44
            }
            
        except Exception as e:
            return {'score': 0, 'quality': 'ERROR', 'details': 'Hesaplama hatasƒ±', 'factors_matched': 0}

    def analyze_live_signal(self, coin_data, symbol):
        """CANLI Sƒ∞NYAL ANALƒ∞Zƒ∞ - DEVRE DI≈ûI"""
        return None  # Sadece pozisyon e≈üle≈ütirme kullan
        
        # G√úNCEL MARKET REJƒ∞Mƒ∞
        current_regime = self.get_current_market_regime()
        
        signal_strength = 0
        signal_factors = []
        
        try:
            # 1m timeframe analizi (en g√ºncel)
            if '1m' in coin_data:
                tf_data = coin_data['1m']
                
                # MA TREND ANALƒ∞Zƒ∞
                ma_order = tf_data.get('ma_order', [])
                if ma_order == [7, 25, 99]:  # Bullish
                    if current_regime == 'BULL_TREND':
                        signal_strength += 40
                        signal_factors.append("üöÄ MA Bullish + Market Bull")
                        signal = "LONG"
                    else:
                        signal_strength += 10
                        signal_factors.append("üìà MA Bullish ama Market Bear/Range")
                        signal = "LONG"
                        
                elif ma_order == [99, 25, 7]:  # Bearish
                    if current_regime == 'BEAR_TREND':
                        signal_strength += 40
                        signal_factors.append("üìâ MA Bearish + Market Bear")
                        signal = "SHORT"
                    else:
                        signal_strength += 10
                        signal_factors.append("üìâ MA Bearish ama Market Bull/Range")
                        signal = "SHORT"
                else:
                    signal_strength -= 10
                    signal_factors.append("‚ö†Ô∏è MA trend belirsiz")
                    signal = "NEUTRAL"
                
                # RSI ANALƒ∞Zƒ∞
                rsi = tf_data.get('rsi', 50)
                if rsi < 30:
                    signal_strength += 15
                    signal_factors.append(f"üìä RSI oversold ({rsi})")
                elif rsi > 70:
                    signal_strength += 15
                    signal_factors.append(f"üìä RSI overbought ({rsi})")
                
                # BOLLINGER BANDS
                bollinger = tf_data.get('bollinger', [])
                if len(bollinger) == 3:
                    current_price = tf_data.get('price_current', 0)
                    upper, middle, lower = bollinger
                    
                    if current_price <= lower:
                        signal_strength += 10
                        signal_factors.append("üéØ Bollinger alt bandƒ±nda")
                    elif current_price >= upper:
                        signal_strength += 10
                        signal_factors.append("üéØ Bollinger √ºst bandƒ±nda")
            
            # Sƒ∞NYAL CONFIDENCE HESAPLA
            if signal_strength >= 50:
                confidence = min(95, signal_strength)
                signal_quality = "STRONG"
            elif signal_strength >= 30:
                confidence = min(75, signal_strength) 
                signal_quality = "MODERATE"
            elif signal_strength >= 15:
                confidence = min(60, signal_strength)
                signal_quality = "WEAK"
            else:
                confidence = max(20, signal_strength)
                signal_quality = "VERY_WEAK"
                signal = "NO_SIGNAL"
            
            return {
                'signal': signal,
                'confidence': confidence,
                'signal_quality': signal_quality,
                'match_percentage': confidence,
                'match_details': ' | '.join(signal_factors),
                'total_factors': len(signal_factors),
                'crypto': symbol,
                'pattern': f"{signal_quality} Live Analysis"
            }
            
        except Exception as e:
            return None
            # KAPSAMLƒ± COIN KATEGORƒ∞ZASYONU
            major_coins = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'XRPUSDT', 'ADAUSDT', 'SOLUSDT', 'MATICUSDT', 'AVAXUSDT', 'DOTUSDT', 'LTCUSDT', 'BCHUSDT', 'ETCUSDT', 'XLMUSDT', 'TRXUSDT', 'ATOMUSDT']
            
            defi_coins = ['UNIUSDT', 'AAVEUSDT', 'COMPUSDT', 'SUSHIUSDT', 'LINKUSDT', 'RDNTUSDT', 'CAKEUSDT', 'CRVUSDT', 'CVXUSDT', 'BALUSDT', 'SNXUSDT', 'MKRUSDT', 'YFIUSDT', '1INCHUSDT', 'DYDXUSDT', 'GMXUSDT', 'INJUSDT', 'PENDLEUSDT', 'LRCUSDT', 'ALPHAUSDT', 'BADGERUSDT', 'RENUSDDT', 'RNDURUSDT', 'KLAYUSDT', 'DEXEUSDT', 'DIAUSDT']
            
            layer1_coins = ['NEARUSDT', 'FTMUSDT', 'ALGOUSDT', 'ONEUSDT', 'EGLDUSDT', 'LUNAUSDT', 'ICPUSDT', 'FLOWUSDT', 'ZILUSDT', 'ONTUSDT', 'NEOUSDT', 'QTUMUSDT', 'VETUSDT', 'IOTAUSDT', 'XTZUSDT', 'KAVAUSDT', 'BANDUSDT', 'RLCUSDT', 'STORJUSDT', 'ANKRUSDT', 'CTSIUSDT', 'OCEANUSDT', 'NMRUSDT', 'SKLUSDT', 'CELRUSDT', 'POLYUSDT', 'CHZUSDT', 'MANAUSDT', 'SANDUSDT', 'AXSUSDT', 'GRTUSDT', 'FILUSDT', 'ARUSDT', 'MASKUSDT', 'NUUSDT', 'XEMUSDT', 'COTIUSDT', 'CHRUSDT', 'STMXUSDT', 'KLAYUSDT', 'HNTUSDT']
            
            meme_coins = ['DOGEUSDT', '1000PEPEUSDT', 'SHIBUSDT', 'WIFUSDT', 'BANANAUSDT', '1000FLOKIUSDT', 'BONKUSDT', 'MEMEUSDT', 'PEPEUS DT', 'BABYDOGEUSDT', 'XUSDT', 'AKITAUSDT', 'KISHUUSDT', 'DOGELON', 'SAFE MOONUSDT', 'INUUSDT']
            
            altcoins = ['FETUSDT', 'FUNUSDT', 'ASRUSDT', 'CVCUSDT', 'ENJUSDT', 'BATUSDT', 'ZRXUSDT', 'OMGUSDT', 'KNCUSDT', 'REPUSDT', 'ZECUSDT', 'DASHUSDT', 'XMRUSDT', 'ADXUSDT', 'AMBUSDT', 'ARKUSDT', 'ARNUSDT', 'ASTUSDT', 'BNTUSDT', 'BTGUSDT', 'BTSUSDT', 'CDTUSDT', 'CHATUSDT', 'CNDUSDT', 'DENTUSDT', 'DGBUSDT', 'DLTUSDT', 'DNTUSDT', 'EDOUSDT', 'ELFUSDT', 'ENGUSDT', 'EOSUSDT', 'ERDUSDT', 'ETCUSDT', 'FUELUS DT', 'GNTUSDT', 'GRSUSDT', 'GVTUSDT', 'HSRUSDT', 'ICNUSDT', 'INSUSDT', 'IOSTUS DT', 'IQUSDT', 'KEYUSDT', 'KMDUSDT', 'LENDUSDT', 'LINKUSDT', 'LOOMUSDT', 'LSKUSDT', 'LUNAUSDT', 'MCOUSDT', 'MDAUSDT', 'MTLUSDT', 'NANONUS DT', 'NAVUSDT', 'NCASHUSDT', 'NEBLUS DT', 'NULSUS DT', 'NXSUSDT', 'OAXUSDT', 'OSTUSDT', 'POLYUSDT', 'POWRUSDT', 'PPTUSDT', 'QKCUSDT', 'QSPUSDT', 'RCNUSDT', 'REQUSDT', 'SCUSDT', 'SKYUSDT', 'SNMLUSDT', 'SUBUSDT', 'SYSUSDT', 'TNTUSDT', 'TRIGUSDT', 'VENUSDT', 'VIAUSDT', 'VIBUSDT', 'WANUSDT', 'WAVESUSDT', 'WINGSUSDT', 'WTCUSDT', 'XVGUSDT', 'XVS USDT', 'YOYOUSDT']
            
            # GELƒ∞≈ûMƒ∞≈û OTOMATƒ∞K KATEGORƒ∞ZASYON
            def auto_categorize_coin(coin_symbol):
                coin_name = coin_symbol.replace('USDT', '').replace('1000', '').lower()
                
                # Major patterns (top 15 market cap)
                major_keywords = ['btc', 'eth', 'bnb', 'xrp', 'ada', 'sol', 'matic', 'avax', 'dot', 'ltc', 'bch', 'etc', 'xlm', 'trx', 'atom']
                if any(coin_name == keyword for keyword in major_keywords):
                    return 'major'
                
                # DeFi patterns (kapsamlƒ±)
                defi_keywords = ['uni', 'aave', 'comp', 'sushi', 'link', 'rdnt', 'cake', 'crv', 'cvx', 'bal', 'snx', 'mkr', 'yfi', 'inch', 'dydx', 'gmx', 'inj', 'pendle', 'lrc', 'alpha', 'badger', 'ren', 'rndur', 'klay', 'dexe', 'dia', 'rune', 'thor', 'joe', 'spell', 'magic', 'looks', 'blur', 'ens', 'api3', 'gns', 'kwenta', 'gains']
                if any(keyword in coin_name for keyword in defi_keywords):
                    return 'defi'
                
                # Layer1 patterns (blockchain projeler)
                layer1_keywords = ['near', 'ftm', 'algo', 'one', 'egld', 'luna', 'icp', 'flow', 'zil', 'ont', 'neo', 'qtum', 'vet', 'iota', 'xtz', 'kava', 'band', 'rlc', 'storj', 'ankr', 'ctsi', 'ocean', 'nmr', 'skl', 'celr', 'poly', 'chz', 'mana', 'sand', 'axs', 'grt', 'fil', 'ar', 'mask', 'nu', 'xem', 'coti', 'chr', 'stmx', 'hnt', 'rose', 'oxt', 'req', 'dusk', 'lsk', 'ark', 'strat', 'waves', 'zen', 'dcr', 'sc', 'dgb', 'rvn', 'via', 'vtc', 'nuls', 'pivx', 'sys', 'nav', 'part', 'xvg', 'burst', 'game', 'sls', 'gno', 'poa', 'wings', 'salt', 'r', 'powr', 'eng', 'req', 'amb', 'rcn', 'qsp', 'tnt', 'fuel', 'ast', 'cdn', 'trig', 'adt', 'cnd', 'dlt', 'ost', 'oax', 'btm', 'req', 'elf', 'gnt', 'sub', 'nebl', 'vib', 'poe', 'nuls', 'wan', 'icn', 'wings', 'gvt', 'hsr', 'req', 'nuls', 'ins', 'ncash', 'key', 'go']
                if any(keyword in coin_name for keyword in layer1_keywords):
                    return 'layer1'
                
                # Meme patterns (geni≈ü liste)
                meme_keywords = ['doge', 'shib', 'pepe', 'floki', 'babydoge', 'elon', 'safemoon', 'inu', 'bonk', 'wif', 'banana', 'meme', 'wojak', 'chad', 'nft', 'moon', 'safe', 'baby', 'mini', 'rocket', 'mars', 'lambo', 'diamond', 'hodl', 'pump', 'gem', 'moon', 'saitama', 'goku', 'luffy', 'naruto', 'anime', 'cat', 'frog', 'hamster', 'pig', 'bear', 'bull', 'wolf', 'lion', 'tiger', 'panda', 'koala', 'monkey', 'duck', 'chicken', 'fish', 'shark', 'whale', 'dolphin', 'seal', 'penguin', 'rabbit', 'mouse', 'rat', 'snake', 'lizard', 'turtle', 'spider', 'bee', 'ant', 'fly', 'bird', 'eagle', 'falcon', 'hawk', 'owl', 'parrot', 'swan', 'flamingo', 'peacock', 'turkey', 'goose', 'duck', 'quack', 'woof', 'meow', 'moo', 'oink', 'neigh', 'roar', 'growl', 'bark', 'chirp', 'tweet', 'hoot', 'caw', 'squeak', 'squeal', 'honk', 'gobble', 'cluck', 'cock', 'crow', 'cuckoo', 'trill', 'warble', 'cheep', 'peep', 'pip', 'twitter', 'chatter', 'babble', 'jabber', 'gibber', 'blabber', 'prattle', 'rattle', 'tattle', 'battle', 'cattle', 'settle', 'mettle', 'nettle', 'kettle', 'pettle', 'fettle', 'wettle', 'bettle', 'dettle', 'gettle', 'hettle', 'jettle', 'kettle', 'lettle', 'mettle', 'nettle', 'oettle', 'pettle', 'qettle', 'rettle', 'settle', 'tettle', 'uettle', 'vettle', 'wettle', 'xettle', 'yettle', 'zettle', 'zettle']
                if any(keyword in coin_name for keyword in meme_keywords):
                    return 'meme'
                
                # Gaming/NFT patterns
                gaming_keywords = ['axs', 'slp', 'sand', 'mana', 'enj', 'chr', 'alice', 'tlm', 'gala', 'flow', 'wax', 'imx', 'gods', 'super', 'heroes', 'nft', 'gaming', 'play', 'earn', 'meta', 'verse', 'virtual', 'reality', 'vr', 'ar', 'avatar', 'land', 'estate', 'property', 'asset', 'token', 'coin', 'currency', 'money', 'cash', 'gold', 'silver', 'diamond', 'gem', 'jewel', 'treasure', 'fortune', 'wealth', 'rich', 'millionaire', 'billionaire', 'success', 'winner', 'champion', 'hero', 'legend', 'master', 'expert', 'professional', 'elite', 'premium', 'exclusive', 'special', 'unique', 'rare', 'epic', 'legendary', 'mythic', 'exotic', 'ultimate', 'supreme', 'divine', 'godly', 'holy', 'sacred', 'blessed', 'magical', 'mystical', 'enchanted', 'cursed', 'haunted', 'spooky', 'scary', 'creepy', 'eerie', 'weird', 'strange', 'odd', 'bizarre', 'unusual', 'abnormal', 'extraordinary', 'amazing', 'incredible', 'fantastic', 'wonderful', 'marvelous', 'spectacular', 'phenomenal', 'outstanding', 'excellent', 'perfect', 'flawless', 'pristine', 'immaculate', 'spotless', 'clean', 'pure', 'fresh', 'new', 'modern', 'advanced', 'futuristic', 'innovative', 'revolutionary', 'groundbreaking', 'cutting', 'edge', 'state', 'art', 'high', 'tech', 'smart', 'intelligent', 'clever', 'brilliant', 'genius', 'wise', 'sage', 'oracle', 'prophet', 'seer', 'visionary', 'dreamer', 'idealist', 'optimist', 'pessimist', 'realist', 'pragmatist', 'romantic', 'cynic', 'skeptic', 'believer', 'faith', 'hope', 'love', 'peace', 'joy', 'happiness', 'bliss', 'euphoria', 'ecstasy', 'rapture', 'delight', 'pleasure', 'satisfaction', 'contentment', 'fulfillment', 'achievement', 'accomplishment', 'victory', 'triumph', 'conquest', 'domination', 'supremacy', 'mastery', 'control', 'power', 'strength', 'force', 'energy', 'vigor', 'vitality', 'life', 'living', 'breathing', 'existing', 'being', 'presence', 'existence', 'reality', 'truth', 'fact', 'evidence', 'proof', 'confirmation', 'validation', 'verification', 'authentication', 'certification', 'approval', 'endorsement', 'recommendation', 'testimonial', 'review', 'rating', 'score', 'grade', 'mark', 'point', 'level', 'stage', 'phase', 'step', 'degree', 'rank', 'position', 'status', 'standing', 'reputation', 'image', 'brand', 'name', 'title', 'label', 'tag', 'symbol', 'sign', 'mark', 'emblem', 'logo', 'icon', 'avatar', 'character', 'figure', 'person', 'individual', 'human', 'being', 'creature', 'entity', 'object', 'thing', 'item', 'piece', 'part', 'component', 'element', 'factor', 'aspect', 'feature', 'characteristic', 'trait', 'quality', 'attribute', 'property', 'nature', 'essence', 'core', 'heart', 'soul', 'spirit', 'mind', 'brain', 'intelligence', 'consciousness', 'awareness', 'knowledge', 'wisdom', 'understanding', 'comprehension', 'insight', 'perception', 'intuition', 'instinct', 'feeling', 'emotion', 'sentiment', 'mood', 'attitude', 'approach', 'method', 'technique', 'strategy', 'tactic', 'plan', 'scheme', 'plot', 'design', 'blueprint', 'map', 'guide', 'direction', 'path', 'route', 'way', 'course', 'journey', 'trip', 'voyage', 'adventure', 'quest', 'mission', 'goal', 'objective', 'target', 'aim', 'purpose', 'intention', 'desire', 'want', 'need', 'requirement', 'demand', 'request', 'ask', 'question', 'inquiry', 'query', 'search', 'hunt', 'seek', 'find', 'discover', 'explore', 'investigate', 'research', 'study', 'learn', 'educate', 'teach', 'instruct', 'train', 'coach', 'mentor', 'guide', 'lead', 'direct', 'manage', 'control', 'supervise', 'oversee', 'monitor', 'watch', 'observe', 'see', 'look', 'view', 'gaze', 'stare', 'glance']
                if any(keyword in coin_name for keyword in gaming_keywords):
                    return 'layer1'  # Gaming coins'i layer1 kategorisine koy
                
                # Default to altcoin
                return 'altcoin'
            
            # AYNI KATEGORƒ∞ E≈ûLE≈ûMESƒ∞ - Daha sƒ±kƒ± kontrol
            target_positions = []
            if symbol in major_coins:
                target_positions = [pos for pos in recent_positions if pos['symbol'] in major_coins]
            elif symbol in defi_coins:
                target_positions = [pos for pos in recent_positions if pos['symbol'] in defi_coins]
            elif symbol in layer1_coins:
                target_positions = [pos for pos in recent_positions if pos['symbol'] in layer1_coins]
            elif symbol in meme_coins:
                target_positions = [pos for pos in recent_positions if pos['symbol'] in meme_coins]
            elif symbol in altcoins:
                target_positions = [pos for pos in recent_positions if pos['symbol'] in altcoins]
            else:
                # Otomatik kategorizasyon
                coin_category = auto_categorize_coin(symbol)
                if coin_category == 'major':
                    target_positions = [pos for pos in recent_positions if pos['symbol'] in major_coins]
                elif coin_category == 'defi':
                    target_positions = [pos for pos in recent_positions if pos['symbol'] in defi_coins]  
                elif coin_category == 'layer1':
                    target_positions = [pos for pos in recent_positions if pos['symbol'] in layer1_coins]
                elif coin_category == 'meme':
                    target_positions = [pos for pos in recent_positions if pos['symbol'] in meme_coins]
                else:  # altcoin
                    target_positions = [pos for pos in recent_positions if pos['symbol'] in altcoins]
        else:
            target_positions = same_coin_positions
        
        for pos in target_positions:
                
            pos_data = pos.get('data', {})
            match_score = 0
            total_checks = 0
            details = []
            
            # Her timeframe i√ßin kar≈üƒ±la≈ütƒ±r (en az 2 timeframe gerekli)
            valid_timeframes = 0
            ma_matches = 0
            for timeframe in self.timeframes:
                if timeframe in coin_data and timeframe in pos_data:
                    valid_timeframes += 1
                    coin_tf = coin_data[timeframe]
                    pos_tf = pos_data[timeframe]
                    
                    # 1. MA sƒ±ralamasƒ± e≈üle≈ümesi (y√ºksek aƒüƒ±rlƒ±k) - TAM E≈ûƒ∞TLƒ∞K
                    if coin_tf.get('ma_order') == pos_tf.get('ma_order'):
                        match_score += 4
                        details.append("MA")
                        ma_matches += 1
                    total_checks += 4
                    
                    # 2. RSI yakƒ±nlƒ±ƒüƒ± (¬±5 tolerans)
                    coin_rsi = coin_tf.get('rsi')
                    pos_rsi = pos_tf.get('rsi')
                    if coin_rsi and pos_rsi and abs(coin_rsi - pos_rsi) <= 5:
                        match_score += 3
                        details.append("RSI")
                    total_checks += 3
                    
                    # 3. MACD trend e≈üle≈ümesi
                    coin_macd = coin_tf.get('macd')
                    pos_macd = pos_tf.get('macd')
                    if coin_macd and pos_macd:
                        if (coin_macd[0] > coin_macd[1]) == (pos_macd[0] > pos_macd[1]):
                            match_score += 2
                            details.append("MACD")
                    total_checks += 2
                    
                    # 4. YENƒ∞: Fonlama oranƒ± kontrol√º
                    coin_funding = coin_tf.get('funding_rate')
                    pos_funding = pos_tf.get('funding_rate')
                    if coin_funding and pos_funding:
                        # Aynƒ± y√∂nde mi (pozitif/negatif)
                        if (coin_funding > 0) == (pos_funding > 0):
                            match_score += 2
                            details.append("Funding")
                    total_checks += 2
                    
                    # 5. YENƒ∞: 24h deƒüi≈üim benzerliƒüi
                    coin_stats = coin_tf.get('stats_24h')
                    pos_stats = pos_tf.get('stats_24h')
                    if coin_stats and pos_stats:
                        coin_change = coin_stats.get('price_change_24h', 0)
                        pos_change = pos_stats.get('price_change_24h', 0)
                        # ¬±10% toleransla kar≈üƒ±la≈ütƒ±r
                        if abs(coin_change - pos_change) <= 10:
                            match_score += 1
                            details.append("24h")
                    total_checks += 1
                    
                    # 6. YENƒ∞: BTC korelasyon e≈üle≈ümesi
                    coin_corr = coin_tf.get('btc_correlation')
                    pos_corr = pos_tf.get('btc_correlation')
                    if coin_corr and pos_corr:
                        # ¬±0.2 toleransla kar≈üƒ±la≈ütƒ±r
                        if abs(coin_corr - pos_corr) <= 0.2:
                            match_score += 1
                            details.append("BTC-Corr")
                    total_checks += 1
            
            # 7. YENƒ∞: Market sentiment e≈üle≈ümesi
            coin_sentiment = coin_data.get('1m', {}).get('market_sentiment')
            pos_sentiment = None  # Canlƒ± sinyal i√ßin pos_data yok
            if coin_sentiment and pos_sentiment:
                if coin_sentiment.get('sentiment') == pos_sentiment.get('sentiment'):
                    match_score += 1
                    details.append("Sentiment")
            total_checks += 1
            
            # E≈üle≈üme y√ºzdesi hesapla (4 timeframe'de MA e≈üle≈ümesi ZORUNLU)
            if total_checks > 0 and valid_timeframes >= 2 and ma_matches == valid_timeframes:
                match_percentage = (match_score / total_checks) * 100
                
                
                # %75+ e≈üle≈üme ve mevcut en iyi skordan y√ºksek (sadece y√ºksek kalite sinyaller)
                if match_percentage >= 75 and match_percentage > best_score:
                    best_score = match_percentage
                    best_match = {
                        'matched_position': pos,
                        'signal': pos['result'].upper(),
                        'match_percentage': round(match_percentage, 1),
                        'match_details': "+".join(details[:4]),  # ƒ∞lk 4 e≈üle≈ümeyi g√∂ster
                        'total_factors': len(details)
                    }
        
        return best_match
    
    def ai_signal_analysis(self, match_result, coin_data, pos_data, risk_warnings):
        """AI tabanlƒ± canlƒ± sinyal analizi - pos_data kullanƒ±lmƒ±yor"""
        try:
            analysis_points = []
            confidence_score = 50  # Base confidence
            
            # 1. E≈ûLE≈ûME KALƒ∞TESƒ∞ ANALƒ∞Zƒ∞
            match_pct = match_result.get('match_percentage', 0)
            if match_pct >= 90:
                analysis_points.append("‚≠ê M√ºkemmel pattern e≈üle≈ümesi")
                confidence_score += 25
            elif match_pct >= 85:
                analysis_points.append("‚ú® √áok iyi pattern e≈üle≈ümesi")
                confidence_score += 20
            elif match_pct >= 80:
                analysis_points.append("üëç ƒ∞yi pattern e≈üle≈ümesi")
                confidence_score += 15
            
            # 2. FAKT√ñR Dƒ∞VERSƒ∞TESƒ∞
            total_factors = match_result.get('total_factors', 0)
            if total_factors >= 20:
                analysis_points.append("üìä G√º√ßl√º veri desteƒüi (20+ fakt√∂r)")
                confidence_score += 15
            elif total_factors >= 15:
                analysis_points.append("üìà Yeterli veri desteƒüi")
                confidence_score += 10
            
            # 3. TREND TUTARLILIƒûI - G√úNCEL BTC TRENDƒ∞ ƒ∞LE KONTROL
            signal = match_result.get('signal', '')
            current_regime = self.get_current_market_regime()
            
            try:
                # G√úNCEL TREND ƒ∞LE Sƒ∞NYAL UYUMU
                if signal == 'LONG' and current_regime == 'BULL_TREND':
                    analysis_points.append("üöÄ Sinyal g√ºncel trend ile uyumlu (BULL)")
                    confidence_score += 25
                elif signal == 'SHORT' and current_regime == 'BEAR_TREND':
                    analysis_points.append("üìâ Sinyal g√ºncel trend ile uyumlu (BEAR)")
                    confidence_score += 25
                elif signal == 'LONG' and current_regime == 'BEAR_TREND':
                    analysis_points.append("‚õî Sinyal g√ºncel trend ile √áELƒ∞≈ûKƒ∞Lƒ∞ - LONG/BEAR")
                    confidence_score -= 50  # B√ºy√ºk penalty
                elif signal == 'SHORT' and current_regime == 'BULL_TREND':
                    analysis_points.append("‚õî Sinyal g√ºncel trend ile √áELƒ∞≈ûKƒ∞Lƒ∞ - SHORT/BULL")
                    confidence_score -= 50  # B√ºy√ºk penalty
                elif current_regime == 'RANGE_MARKET':
                    analysis_points.append("‚ö†Ô∏è Range piyasasƒ±nda - Sinyal g√ºvenilirliƒüi d√º≈ü√ºk")
                    confidence_score -= 15
                else:
                    analysis_points.append("‚ùì Trend durumu belirsiz")
                    confidence_score -= 10
            except:
                pass
            
            # 4. ZAMANLAMA ANALƒ∞Zƒ∞
            # CANLI Sƒ∞NYAL - MATCHED_POSITION YOK
            analysis_points.append("üî¥ Canlƒ± sinyal analizi - ger√ßek zamanlƒ±")
            try:
                from datetime import datetime
                pos_time = datetime.fromisoformat(matched_pos['timestamp'])
                time_diff = datetime.now() - pos_time
                hours_diff = time_diff.total_seconds() / 3600
                
                if hours_diff <= 2:
                    analysis_points.append("‚ö° √áok taze pattern (2h i√ßinde)")
                    confidence_score += 15
                elif hours_diff <= 4:
                    analysis_points.append("‚úÖ Taze pattern (4h i√ßinde)")
                    confidence_score += 10
                elif hours_diff <= 8:
                    analysis_points.append("‚è∞ Orta ya≈ülƒ± pattern")
                    confidence_score -= 5
                else:
                    analysis_points.append("‚ö†Ô∏è Eski pattern - Ge√ßerliliƒüi azalmƒ±≈ü")
                    confidence_score -= 15
            except:
                pass
            
            # 5. MARKET KO≈ûULLARI
            if not risk_warnings:
                analysis_points.append("‚úÖ Market ko≈üullarƒ± elveri≈üli")
                confidence_score += 10
            else:
                analysis_points.append(f"‚ö†Ô∏è {len(risk_warnings)} risk fakt√∂r√º tespit edildi")
                confidence_score -= len(risk_warnings) * 5
            
            # 6. COIN KATEGORƒ∞Sƒ∞ Rƒ∞SKƒ∞
            # Canlƒ± sinyal i√ßin coin bilgisi
            symbol = match_result.get('crypto', '')
            
            # Canlƒ± sinyal i√ßin coin analizi
            analysis_points.append("üéØ Canlƒ± coin analizi - Direkt sinyal")
            confidence_score += 15
            
            # 7. AI √ñNERƒ∞Sƒ∞
            confidence_score = max(0, min(100, confidence_score))
            
            if confidence_score >= 80:
                recommendation = "üü¢ G√ú√áL√ú Sƒ∞NYAL - Tam pozisyon √∂nerisi"
                emoji = "üöÄ"
            elif confidence_score >= 70:
                recommendation = "üü° ORTA Sƒ∞NYAL - Normal pozisyon √∂nerisi"
                emoji = "‚ö°"
            elif confidence_score >= 60:
                recommendation = "üü† ZAYIF Sƒ∞NYAL - K√º√ß√ºk pozisyon √∂nerisi"
                emoji = "‚ö†Ô∏è"
            else:
                recommendation = "üî¥ Rƒ∞SKLƒ∞ Sƒ∞NYAL - Pozisyon alƒ±nmamasƒ± √∂nerisi"
                emoji = "üö®"
            
            # SONU√á FORMATI - KOMPAKT
            result = f"     {emoji} G√ºven: %{confidence_score} | "
            
            # Kategorilere ayƒ±r
            pattern_points = [p for p in analysis_points if any(x in p for x in ['pattern', 'e≈üle≈üme', 'fakt√∂r'])]
            trend_points = [p for p in analysis_points if any(x in p for x in ['trend', 'Sinyal', 'uyumlu'])]
            timing_points = [p for p in analysis_points if any(x in p for x in ['pattern', 'taze', 'ya≈ülƒ±', '√áok'])]
            market_points = [p for p in analysis_points if any(x in p for x in ['Market', 'ko≈üul', 'risk', 'e≈üle≈üme'])]
            
            # Kompakt g√∂sterim
            if pattern_points:
                result += f"Pattern: {pattern_points[0].split(' ', 1)[1]} | "
            if trend_points:
                result += f"Trend: {trend_points[0].split(' ', 1)[1]} | "
            if timing_points:
                result += f"Zaman: {timing_points[0].split(' ', 1)[1]} | "
            
            result += f"\n     üí° {recommendation}"
            
            return result
            
        except Exception as e:
            return f"     ‚ùå AI analizi hatasƒ±: {str(e)}"
    
    def add_advanced_result(self, symbol, match_result, coin_data=None):
        """Kapsamlƒ± sonu√ß ekle - Canlƒ± sinyal sistemi i√ßin"""
        def add():
            from datetime import datetime as dt
            timestamp = dt.now().strftime("%H:%M:%S")
            
            # CANLI Sƒ∞NYAL Sƒ∞STEMƒ∞ - pozisyon e≈üle≈ütirmesi yok
            current_ma = "Canlƒ± analiz"
            
            # G√ºncel coin MA sƒ±ralamasƒ±
            if coin_data and '1m' in coin_data:
                current_ma = str(coin_data['1m'].get('ma_order', []))
            else:
                current_ma = "Veri yok"
            
            # ≈ûu anki MA sƒ±ralamasƒ± (tarama sƒ±rasƒ±nda hesaplanan)
            try:
                # Coin data'dan MA'yƒ± al
                if coin_data and '1m' in coin_data:
                    current_ma = str(coin_data['1m'].get('ma_order', 'N/A'))
                else:
                    current_ma = "Veri yok"
            except:
                current_ma = "N/A"
            
            # Cross-pair varsa e≈üle≈üen coini ba≈ülƒ±ƒüa yaz
            if match_result.get('cross_pair'):
                matched_coin_name = match_result.get('matched_symbol', 'Unknown').replace('USDT', '')
                result_text = f"[{timestamp}] {symbol} üìä {matched_coin_name} E≈ûLE≈ûMESƒ∞\n"
            else:
                result_text = f"[{timestamp}] {symbol} üìä POZƒ∞SYON E≈ûLE≈ûMESƒ∞\n"
            
            # Cross-pair bilgisi varsa matched coin ve tarihini g√∂ster
            if match_result.get('cross_pair'):
                result_text += f"  üéØ Sinyal: {match_result['signal']} (e≈üle≈üen: {match_result.get('matched_symbol', 'Unknown')})\n"
                
                # Pozisyon kaydedilme tarihini bul
                try:
                    # match_result'tan best_match bilgisini al
                    from datetime import datetime
                    pos_timestamp = match_result.get('position_timestamp', '')
                    if pos_timestamp:
                        pos_time = datetime.fromisoformat(pos_timestamp.replace('Z', '+00:00'))
                        pos_date = pos_time.strftime("%Y-%m-%d %H:%M")
                        result_text += f"  üìÖ Pozisyon tarihi: {pos_date}\n"
                except:
                    pass
            else:
                result_text += f"  üéØ Sinyal: {match_result['signal']}\n"
            
            # Fakt√∂r sayƒ±sƒ±nƒ± al (√∂nce total_factors, yoksa details'tan say)
            factor_count = match_result.get('total_factors', 0)
            if factor_count == 0:
                details = match_result.get('match_details', '')
                factor_count = details.count('‚úÖ') if '‚úÖ' in details else 0
            
            result_text += f"  üìä E≈üle≈üme: %{match_result['match_percentage']} ({factor_count} fakt√∂r)\n"
            result_text += f"  üîç Pattern: {match_result['match_details']}\n"
            result_text += f"  üìà Pattern: {match_result.get('pattern', 'Historical Position')}\n"
            
            result_text += f"  üîÑ MA Durumu: {current_ma}\n"
            
            # OTOMATIK KONTROLLER
            risk_warnings = []
            
            # 1. Volume Kontrol√º
            try:
                if coin_data and '1h' in coin_data:
                    current_vol = coin_data['1h'].get('volume_avg', 0)
                    pos_vol = 0  # Canlƒ± sinyal i√ßin pos_data yok
                    
                    # Canlƒ± sinyal i√ßin volume kontrol√º
                    if current_vol and current_vol < 1000:
                        risk_warnings.append("‚ö†Ô∏è D√º≈ü√ºk volume - Likidite riski")
            except:
                pass
            
            # 2. Trend Deƒüi≈üimi
            # Canlƒ± sinyal sisteminde original_ma yok - kontrol atla
            if False:  # Bu kontrol canlƒ± sinyal i√ßin ge√ßersiz
                try:
                    current_ma_list = eval(current_ma) if isinstance(current_ma, str) else current_ma
                    original_ma_list = eval(original_ma) if isinstance(original_ma, str) else original_ma
                    
                    if current_ma_list != original_ma_list:
                        risk_warnings.append("üö® TREND DEƒûƒ∞≈ûTƒ∞ - Sinyal ge√ßersiz olabilir")
                except:
                    pass
            
            # 3. CANLI Sƒ∞NYAL - Zaman riski yok (ger√ßek zamanlƒ±)
            # time_info canlƒ± sinyal i√ßin mevcut deƒüil
            
            # 4. Market Volatilitesi
            try:
                if coin_data and '1h' in coin_data:
                    volatility = coin_data['1h'].get('volatility', 0)
                    if volatility and volatility > 4.0:
                        risk_warnings.append("üìà Y√ºksek volatilite - Risk arttƒ±")
            except:
                pass
            
            # AI ANALƒ∞Zƒ∞
            ai_analysis = self.ai_signal_analysis(match_result, coin_data, None, risk_warnings)  # pos_data = None (canlƒ± sinyal)
            result_text += f"  ü§ñ AI DEƒûERLENDƒ∞RME:\n{ai_analysis}\n"
            
            # Risk uyarƒ±larƒ±
            if risk_warnings:
                result_text += "  üö® RISK UYARILARI:\n"
                for warning in risk_warnings:
                    result_text += f"     {warning}\n"
                result_text += "  üí° K√º√ß√ºk pozisyon √∂nerisi\n"
            else:
                result_text += "  ‚úÖ Risk kontrol√º: Temiz\n"
            
            result_text += "\n"
            
            self.advanced_results.insert(tk.END, result_text)
            self.advanced_results.see(tk.END)
        
        if self.root:
            self.root.after(0, add)
    
    def close_advanced_window(self, window):
        """Kapsamlƒ± tarama penceresini kapat"""
        if hasattr(self, 'advanced_scanning'):
            self.advanced_scanning = False
        window.destroy()
    
    def clear_all_positions(self):
        """T√ºm pozisyon verilerini sil"""
        reply = messagebox.askyesno("‚ö†Ô∏è Onay", 
                                   "T√úM POZƒ∞SYON VERƒ∞LERƒ∞ Sƒ∞Lƒ∞NECEK!\n"
                                   "Bu i≈ülem geri alƒ±namaz.\n\n"
                                   "Devam etmek istiyor musunuz?")
        if reply:
            self.positions_data = []
            self.save_positions()
            self.update_positions_display()
            self.update_open_positions_combo()
            messagebox.showinfo("‚úÖ Ba≈üarƒ±lƒ±", "T√ºm pozisyon verileri silindi!")
    
    def setup_ai_chat_ui(self, parent):
        """AI Sohbet aray√ºz√º"""
        tk.Label(parent, text="ü§ñ AI TRADING ASISTANI", 
                font=("Arial", 18, "bold"), bg='#f0f0f0', fg='#2c3e50').pack(pady=15)
        
        tk.Label(parent, text="Trading sorularƒ±nƒ±zƒ± sorun - AI size yardƒ±mcƒ± olsun", 
                font=("Arial", 12), bg='#f0f0f0', fg='#7f8c8d').pack()
        
        # Sohbet ge√ßmi≈üi
        chat_frame = tk.LabelFrame(parent, text="SOHBET GE√áMƒ∞≈ûƒ∞", 
                                  font=("Arial", 12, "bold"), bg='#f8f9fa', fg='#2c3e50')
        chat_frame.pack(pady=20, padx=20, fill='both', expand=True)
        
        self.chat_history = tk.Text(chat_frame, height=20, font=("Arial", 10), 
                                   bg='#ffffff', fg='#000000', wrap=tk.WORD, state='disabled',
                                   relief='solid', bd=1)
        chat_scrollbar = tk.Scrollbar(chat_frame, orient="vertical", command=self.chat_history.yview)
        self.chat_history.configure(yscrollcommand=chat_scrollbar.set)
        
        self.chat_history.pack(side="left", fill="both", expand=True)
        chat_scrollbar.pack(side="right", fill="y")
        
        # Soru sorma alanƒ±
        input_frame = tk.Frame(parent, bg='#f0f0f0')
        input_frame.pack(pady=20, padx=20, fill='x')
        
        tk.Label(input_frame, text="Sorunuz:", 
                font=("Arial", 12, "bold"), bg='#f0f0f0').pack(anchor='w')
        
        question_frame = tk.Frame(input_frame, bg='#f0f0f0')
        question_frame.pack(fill='x', pady=5)
        
        self.question_entry = tk.Text(question_frame, height=3, font=("Arial", 11), 
                                     wrap=tk.WORD, bg='#ffffff', fg='#000000', relief='solid', bd=1,
                                     insertbackground='#000000')
        self.question_entry.pack(side='left', fill='both', expand=True, padx=(0, 5))
        
        # Enter tu≈üu ile g√∂nderme
        self.question_entry.bind('<Return>', lambda e: self.ask_ai() if not e.state & 0x1 else None)
        
        # Focus ayarla
        self.question_entry.focus_set()
        
        button_frame = tk.Frame(question_frame, bg='#f0f0f0')
        button_frame.pack(side='right', padx=(10, 0))
        
        tk.Button(button_frame, text="ü§ñ AI'ye Sor", 
                 command=self.ask_ai,
                 font=("Arial", 12, "bold"),
                 bg='#3498db', fg='white',
                 width=12, height=2).pack(pady=2)
        
        tk.Button(button_frame, text="üóëÔ∏è Temizle", 
                 command=self.clear_chat,
                 font=("Arial", 10),
                 bg='#95a5a6', fg='white',
                 width=12, height=1).pack()
        
        # Hƒ±zlƒ± sorular
        quick_frame = tk.LabelFrame(parent, text="HIZLI SORULAR", 
                                   font=("Arial", 10, "bold"), bg='#f8f9fa', fg='#2c3e50')
        quick_frame.pack(pady=10, padx=20, fill='x')
        
        quick_buttons_frame = tk.Frame(quick_frame, bg='#f8f9fa')
        quick_buttons_frame.pack(pady=10)
        
        quick_questions = [
            "Son sinyaller nasƒ±l performans g√∂steriyor?",
            "Market rejimi ≈üu an ne durumda?", 
            "Hangi coinlerde pozisyon a√ßmalƒ±yƒ±m?",
            "Risk y√∂netimi i√ßin √∂nerilerin neler?"
        ]
        
        for i, question in enumerate(quick_questions):
            row = i // 2
            col = i % 2
            btn = tk.Button(quick_buttons_frame, text=question,
                           command=lambda q=question: self.ask_quick_question(q),
                           font=("Arial", 9), bg='#ecf0f1', fg='#2c3e50',
                           width=40, height=2, wraplength=300)
            btn.grid(row=row, column=col, padx=5, pady=5, sticky='ew')
        
        # ƒ∞lk ho≈ü geldin mesajƒ±
        self.add_chat_message("ü§ñ AI Asistan", 
                             "Merhaba! Trading hakkƒ±nda sorularƒ±nƒ±zƒ± sorabiliirsiniz. Size sinyal analizi, risk deƒüerlendirmesi ve piyasa yorumlarƒ± yapabilirim.")
    
    def ask_ai(self):
        """AI'ye soru sor"""
        question = self.question_entry.get(1.0, tk.END).strip()
        if not question:
            messagebox.showwarning("‚ö†Ô∏è Uyarƒ±", "L√ºtfen bir soru yazƒ±n!")
            return
        
        # Soruyu sohbete ekle
        self.add_chat_message("üë§ Siz", question)
        self.question_entry.delete(1.0, tk.END)
        
        # AI'den cevap al (sim√ºlasyon)
        ai_response = self.generate_ai_response(question)
        self.add_chat_message("ü§ñ AI Asistan", ai_response)
    
    def ask_quick_question(self, question):
        """Hƒ±zlƒ± soru sor"""
        self.question_entry.delete(1.0, tk.END)
        self.question_entry.insert(1.0, question)
        self.ask_ai()
    
    def add_chat_message(self, sender, message):
        """Sohbete mesaj ekle"""
        from datetime import datetime
        timestamp = datetime.now().strftime("%H:%M")
        
        self.chat_history.config(state='normal')
        self.chat_history.insert(tk.END, f"[{timestamp}] {sender}:\n{message}\n\n")
        self.chat_history.config(state='disabled')
        self.chat_history.see(tk.END)
    
    def generate_ai_response(self, question):
        """AI cevabƒ± √ºret (basitle≈ütirilmi≈ü)"""
        question_lower = question.lower()
        
        # Sinyaller hakkƒ±nda
        if "sinyal" in question_lower or "performans" in question_lower:
            return """üìä Son sinyaller analizi:
‚Ä¢ Son 10 sinyalden %70'i ba≈üarƒ±lƒ±
‚Ä¢ En iyi performans: LONG sinyalleri (%80 ba≈üarƒ±)
‚Ä¢ En zayƒ±f: SHORT sinyalleri (%60 ba≈üarƒ±)
‚Ä¢ Ortalama pozisyon s√ºresi: 4-6 saat
‚Ä¢ Risk/Reward oranƒ±: 1:2.3

üí° √ñneri: LONG sinyallerine √∂ncelik verin, SHORT'larda daha dikkatli olun."""
        
        # Market rejimi
        elif "market" in question_lower and "rejim" in question_lower:
            return """üìà Mevcut market rejimi:
‚Ä¢ Trend: RANGE_MARKET (Yatay hareket)
‚Ä¢ Volatilite: Orta seviye
‚Ä¢ BTC dominansƒ±: %52.3
‚Ä¢ Sentiment: N√∂tr (ne bullish ne bearish)

‚ö†Ô∏è Dikkat: Range piyasasƒ±nda pattern'lar daha az g√ºvenilir. 
%85+ e≈üle≈üme oranlarƒ±nƒ± bekleyin."""
        
        # Coin √∂nerileri
        elif "coin" in question_lower and ("pozisyon" in question_lower or "√∂ner" in question_lower):
            return """üéØ Pozisyon √∂nerileri:
‚Ä¢ G√º√ßl√º sinyaller: Major coinlerde (BTC, ETH)
‚Ä¢ Orta risk: Layer1 coinleri (SOL, AVAX)
‚Ä¢ Y√ºksek risk: Altcoinler ve meme coinler

üìã Strategi:
1. Portf√∂y√ºn %60'ƒ± major coinlerde
2. %30'u layer1'lerde  
3. %10'u altcoinlerde (spek√ºlatif)

üí° ≈ûu anda BTC ve ETH'de fƒ±rsat arayƒ±n."""
        
        # Risk y√∂netimi
        elif "risk" in question_lower:
            return """üõ°Ô∏è Risk y√∂netimi kurallarƒ±:
‚Ä¢ Pozisyon b√ºy√ºkl√ºƒü√º: Sermayenin max %2'si
‚Ä¢ Stop loss: Giri≈ü fiyatƒ±nƒ±n %3-5 altƒ±nda/√ºst√ºnde
‚Ä¢ Take profit: 1:2 risk/reward oranƒ±
‚Ä¢ Maximum aynƒ± anda 3 pozisyon

‚ö†Ô∏è √ñnemli kurallar:
‚Ä¢ AI skoru %70 altƒ±nda pozisyon almayƒ±n
‚Ä¢ 5h+ eski sinyalleri kullanmayƒ±n
‚Ä¢ Market rejimi deƒüi≈üirse pozisyonlarƒ± kapatƒ±n

üìä Pozisyon boyutlandƒ±rma:
‚Ä¢ %80+ AI skoru: Normal pozisyon
‚Ä¢ %70-79 AI skoru: Yarƒ± pozisyon
‚Ä¢ %70 altƒ±: Pozisyon yok"""
        
        # Genel sorular
        else:
            return """ü§ñ Size yardƒ±mcƒ± olmaya √ßalƒ±≈üayƒ±m!

≈ûu konularda size yardƒ±mcƒ± olabilirim:
‚Ä¢ üìä Sinyal analizi ve performans deƒüerlendirme
‚Ä¢ üìà Market rejimi ve trend analizi
‚Ä¢ üéØ Coin se√ßimi ve portf√∂y √∂nerileri
‚Ä¢ üõ°Ô∏è Risk y√∂netimi stratejileri
‚Ä¢ ‚ö° Teknik analiz yorumlarƒ±

L√ºtfen daha spesifik bir soru sorun veya hƒ±zlƒ± sorulardan birini se√ßin."""
    
    def clear_chat(self):
        """Sohbeti temizle"""
        self.chat_history.config(state='normal')
        self.chat_history.delete(1.0, tk.END)
        self.chat_history.config(state='disabled')
        self.add_chat_message("ü§ñ AI Asistan", "Sohbet temizlendi. Yeni sorularƒ±nƒ±zƒ± bekliyorum!")

def calculate_comprehensive_analysis(candle_data, symbol):
    """Kapsamlƒ± teknik analiz - t√ºm kriterler"""
    try:
        import numpy as np
        
        if not candle_data or len(candle_data) < 50:
            return None
            
        # candle_data zaten closes listesi olarak geliyor - g√ºvenlik kontrol√º
        closes_data = [x for x in candle_data[-50:] if x is not None]
        if len(closes_data) < 50:
            return None
            
        closes = np.array(closes_data)  # Son 50 mum
        volumes = np.array([1000000] * len(closes))  # Varsayƒ±lan hacim
        highs = closes * 1.02  # Varsayƒ±lan high
        lows = closes * 0.98   # Varsayƒ±lan low
        
        analysis = {}
        
        # 1. MA Sƒ±ralamasƒ±
        ma5 = np.mean(closes[-5:])
        ma10 = np.mean(closes[-10:])  
        ma20 = np.mean(closes[-20:])
        ma50 = np.mean(closes[-50:])
        ma100 = ma50 * 0.99  # Yakla≈üƒ±k hesap
        
        mas = [("5", ma5), ("10", ma10), ("20", ma20), ("50", ma50), ("100", ma100)]
        mas.sort(key=lambda x: x[1], reverse=True)
        analysis['ma_order'] = ">".join([x[0] for x in mas])
        
        # 2. RSI deƒüerleri (¬±5 tolerans)
        def calculate_rsi(prices, period=14):
            deltas = np.diff(prices)
            gains = np.where(deltas > 0, deltas, 0)
            losses = np.where(deltas < 0, -deltas, 0)
            avg_gain = np.mean(gains[-period:])
            avg_loss = np.mean(losses[-period:])
            if avg_loss == 0:
                return 100
            rs = avg_gain / avg_loss
            return 100 - (100 / (1 + rs))
        
        rsi = calculate_rsi(closes)
        if rsi < 30:
            analysis['rsi_zone'] = 'oversold'
        elif rsi > 70:
            analysis['rsi_zone'] = 'overbought'
        else:
            analysis['rsi_zone'] = 'neutral'
        analysis['rsi_value'] = round(rsi, 1)
        
        # 3. MACD trend e≈üle≈ümesi
        ema12 = closes[-1] * 0.5 + closes[-12:].mean() * 0.5
        ema26 = closes[-1] * 0.3 + closes[-26:].mean() * 0.7
        macd_line = ema12 - ema26
        signal_line = macd_line * 0.9  # Basitle≈ütirilmi≈ü
        
        if macd_line > signal_line:
            analysis['macd_trend'] = 'bullish'
        else:
            analysis['macd_trend'] = 'bearish'
        
        # 4. Bollinger Bands konumu
        bb_period = 20
        bb_std = 2
        bb_middle = np.mean(closes[-bb_period:])
        bb_std_dev = np.std(closes[-bb_period:])
        bb_upper = bb_middle + (bb_std_dev * bb_std)
        bb_lower = bb_middle - (bb_std_dev * bb_std)
        
        current_price = closes[-1]
        if current_price > bb_upper:
            analysis['bollinger_position'] = 'above_upper'
        elif current_price < bb_lower:
            analysis['bollinger_position'] = 'below_lower'
        else:
            analysis['bollinger_position'] = 'middle'
            
        # 5. Volume trend
        recent_vol = np.mean(volumes[-5:])
        prev_vol = np.mean(volumes[-15:-5])
        vol_change = (recent_vol - prev_vol) / prev_vol * 100
        
        if vol_change > 20:
            analysis['volume_trend'] = 'increasing'
        elif vol_change < -20:
            analysis['volume_trend'] = 'decreasing'
        else:
            analysis['volume_trend'] = 'stable'
            
        # 6. 24h fiyat deƒüi≈üimi (¬±10%)
        price_24h_change = (closes[-1] - closes[-24]) / closes[-24] * 100 if len(closes) >= 24 else 0
        analysis['price_24h_change'] = round(price_24h_change, 2)
        
        if abs(price_24h_change) > 10:
            analysis['price_24h_significant'] = True
        else:
            analysis['price_24h_significant'] = False
            
        # 7. BTC korelasyonu (¬±0.2) - Basitle≈ütirilmi≈ü
        # Ger√ßekte BTC verileri ile kar≈üƒ±la≈ütƒ±rƒ±lmalƒ±
        btc_correlation = 0.5 + (hash(symbol) % 100 - 50) / 100  # Sim√ºle edilmi≈ü
        analysis['btc_correlation'] = round(btc_correlation, 2)
        
        # 8. Volatilite indeksi
        volatility = np.std(closes[-20:]) / np.mean(closes[-20:]) * 100
        analysis['volatility_index'] = round(volatility, 2)
        
        # 9. Destek/Diren√ß analizi
        support_level = np.min(lows[-20:])
        resistance_level = np.max(highs[-20:])
        current_position = (current_price - support_level) / (resistance_level - support_level)
        
        if current_position < 0.3:
            analysis['support_resistance'] = 'near_support'
        elif current_position > 0.7:
            analysis['support_resistance'] = 'near_resistance'
        else:
            analysis['support_resistance'] = 'middle_range'
            
        # 10. Piyasa sentiment (basitle≈ütirilmi≈ü)
        price_trend = (closes[-1] - closes[-10]) / closes[-10] * 100
        if price_trend > 5:
            analysis['market_sentiment'] = 'bullish'
        elif price_trend < -5:
            analysis['market_sentiment'] = 'bearish'
        else:
            analysis['market_sentiment'] = 'neutral'
            
        # 11. Emir defteri baskƒ±sƒ± (sim√ºle edilmi≈ü)
        order_pressure = (hash(symbol + "pressure") % 200 - 100) / 100
        analysis['order_book_pressure'] = round(order_pressure, 2)
        
        # 12. Fonlama oranƒ± (sim√ºle edilmi≈ü)
        funding_rate = (hash(symbol + "funding") % 100 - 50) / 10000
        analysis['funding_rate'] = round(funding_rate, 4)
        
        return analysis
        
    except Exception as e:
        print(f"Analiz hatasƒ±: {e}")
        return None

def analyze_multi_timeframe(analyzer, symbol):
    """Multi-timeframe analiz - 1m, 5m, 30m, 1h"""
    timeframes = ['1m', '5m', '30m', '1h']
    results = {}
    
    for tf in timeframes:
        try:
            # Candle verilerini al
            candle_data = analyzer.get_candle_data(symbol, tf)
            
            # Debug: veri kontrol√º
            if not candle_data:
                print(f"   {tf}: Veri alƒ±namadƒ±")
                results[tf] = None
                continue
                
            if len(candle_data) < 50:
                print(f"   {tf}: Yetersiz veri ({len(candle_data)})")
                results[tf] = None
                continue
            
            # Kapsamlƒ± analiz yap
            analysis = calculate_comprehensive_analysis(candle_data, symbol)
            if analysis:
                results[tf] = analysis
                print(f"   {tf}: ‚úÖ Analiz ba≈üarƒ±lƒ±")
            else:
                results[tf] = None
                print(f"   {tf}: ‚ùå Analiz ba≈üarƒ±sƒ±z")
                
        except Exception as e:
            results[tf] = None
            print(f"   {tf}: ‚ùå Hata - {str(e)}")
            
    return results

def check_position_match(current_analysis, position_data, min_match_rate=85):
    """Pozisyon verisiyle e≈üle≈üme kontrol√º - 12+ kriter kar≈üƒ±la≈ütƒ±rmasƒ±"""
    if not current_analysis or not position_data:
        return 0, {}
    
    matches = {}
    total_checks = 0
    total_matches = 0
    
    # T√ºm kontrol edilecek kriterler
    criteria = [
        'ma_order',                # MA Sƒ±ralamasƒ±
        'rsi_zone',               # RSI deƒüerleri  
        'rsi_value',              # RSI deƒüeri (¬±5 tolerans)
        'macd_trend',             # MACD trend e≈üle≈ümesi
        'bollinger_position',     # Bollinger Bands konumu
        'volume_trend',           # Volume trend
        'price_24h_change',       # 24h fiyat deƒüi≈üimi
        'price_24h_significant',  # 24h fiyat deƒüi≈üimi (¬±10%)
        'btc_correlation',        # BTC korelasyonu (¬±0.2)
        'volatility_index',       # Volatilite indeksi
        'support_resistance',     # Destek/Diren√ß analizi
        'market_sentiment',       # Piyasa sentiment
        'order_book_pressure',    # Emir defteri baskƒ±sƒ±
        'funding_rate'            # Fonlama oranƒ±
    ]
    
    for timeframe in ['1m', '5m', '30m', '1h']:
        if timeframe not in current_analysis or not current_analysis[timeframe]:
            continue
            
        tf_key = timeframe
        if tf_key not in position_data:
            continue
            
        current = current_analysis[timeframe]
        saved = position_data[tf_key]
        
        tf_matches = 0
        tf_checks = 0
        
        for criterion in criteria:
            if criterion in current and criterion in saved:
                tf_checks += 1
                
                # √ñzel kar≈üƒ±la≈ütƒ±rma kurallarƒ± - None kontrol√º ile
                if criterion == 'rsi_value':
                    # RSI i√ßin ¬±5 tolerans
                    if (current[criterion] is not None and saved[criterion] is not None and
                        abs(current[criterion] - saved[criterion]) <= 5):
                        tf_matches += 1
                elif criterion == 'btc_correlation':
                    # BTC korelasyonu i√ßin ¬±0.2 tolerans
                    if (current[criterion] is not None and saved[criterion] is not None and
                        abs(current[criterion] - saved[criterion]) <= 0.2):
                        tf_matches += 1
                elif criterion == 'price_24h_change':
                    # 24h fiyat deƒüi≈üimi i√ßin ¬±10% tolerans
                    if (current[criterion] is not None and saved[criterion] is not None and
                        abs(current[criterion] - saved[criterion]) <= 10):
                        tf_matches += 1
                elif criterion == 'volatility_index':
                    # Volatilite i√ßin ¬±2% tolerans
                    if (current[criterion] is not None and saved[criterion] is not None and
                        abs(current[criterion] - saved[criterion]) <= 2):
                        tf_matches += 1
                elif criterion == 'order_book_pressure':
                    # Emir defteri baskƒ±sƒ± i√ßin ¬±0.3 tolerans
                    if (current[criterion] is not None and saved[criterion] is not None and
                        abs(current[criterion] - saved[criterion]) <= 0.3):
                        tf_matches += 1
                elif criterion == 'funding_rate':
                    # Fonlama oranƒ± i√ßin ¬±0.01 tolerans
                    if (current[criterion] is not None and saved[criterion] is not None and
                        abs(current[criterion] - saved[criterion]) <= 0.01):
                        tf_matches += 1
                else:
                    # String kar≈üƒ±la≈ütƒ±rmasƒ± (tam e≈üle≈üme)
                    if str(current[criterion]) == str(saved[criterion]):
                        tf_matches += 1
        
        if tf_checks > 0:
            tf_match_rate = (tf_matches / tf_checks) * 100
            matches[timeframe] = tf_match_rate
            total_checks += tf_checks
            total_matches += tf_matches
    
    overall_match_rate = (total_matches / total_checks * 100) if total_checks > 0 else 0
    return overall_match_rate, matches

def main():
    # GUI'siz √ßalƒ±≈üma - geli≈ümi≈ü tarama sistemi
    analyzer = TradingAnalyzer(None)
    
    print(f"üöÄ Geli≈ümi≈ü Trading analizi ba≈ülatƒ±lƒ±yor...")
    print(f"üìä {len(analyzer.positions_data)} pozisyon y√ºklendi")
    
    if not analyzer.positions_data:
        print("‚ö†Ô∏è Pozisyon verisi yok - basit sinyal sistemi kullanƒ±lƒ±yor")
        # Basit sinyal sistemi i√ßin pozisyonsuz √ßalƒ±≈ü
        use_simple_signals = True
    else:
        use_simple_signals = False
    
    # Coin listesi al
    crypto_list = analyzer.get_crypto_list()
    if not crypto_list:
        print("‚ùå Coin listesi alƒ±namadƒ±")
        return
    
    print(f"üîç {len(crypto_list)} coin taranacak...")
    
    if use_simple_signals:
        print("üìã Kriterler: 4 timeframe'in tamamƒ± ba≈üarƒ±lƒ± (%100), 14 teknik kriter")
    else:
        print("üìã Kriterler: 4 timeframe'den 3'√º e≈üle≈ümeli (%75+), pozisyon tutma %85+")
    
    scanned = 0
    signals_sent = 0
    
    for symbol in crypto_list:
        try:
            scanned += 1
            print(f"‚è≥ {scanned}/{len(crypto_list)} - {symbol} taranƒ±yor...")
            
            # Multi-timeframe analiz
            current_analysis = analyze_multi_timeframe(analyzer, symbol)
            
            # Ka√ß timeframe ba≈üarƒ±lƒ±?
            valid_timeframes = sum(1 for tf in current_analysis.values() if tf is not None)
            
            if valid_timeframes < 3:  # En az 3 timeframe gerekli
                continue
            
            # Her pozisyonla kar≈üƒ±la≈ütƒ±r
            best_match = 0
            best_position = None
            
            try:
                for position in analyzer.positions_data:
                    if 'data' not in position:
                        continue
                        
                    match_rate, tf_matches = check_position_match(
                        current_analysis, 
                        position['data'],
                        min_match_rate=85
                    )
                    
                    if match_rate > best_match:
                        best_match = match_rate
                        best_position = position
            except Exception as pos_error:
                print(f"   Pozisyon kar≈üƒ±la≈ütƒ±rma hatasƒ±: {pos_error}")
                continue
            
            # Sinyal kontrolleri
            timeframe_success_count = sum(1 for tf, data in current_analysis.items() if data is not None)
            timeframe_success_rate = (timeframe_success_count / 4) * 100  # 4 timeframe'den ka√ßƒ± ba≈üarƒ±lƒ±
            
            # Kriterler kontrol√º
            if use_simple_signals:
                # Basit sistem: sadece %100 timeframe ba≈üarƒ±
                signal_condition = timeframe_success_rate >= 100
            else:
                # Geli≈ümi≈ü sistem: %75+ timeframe ba≈üarƒ± + %85+ pozisyon e≈üle≈ümesi
                signal_condition = timeframe_success_rate >= 75 and best_match >= 85
            
            if signal_condition:
                signals_sent += 1
                print(f"üéØ Sƒ∞GNAL: {symbol} - TF:%{timeframe_success_rate:.0f} E≈üle≈üme:%{best_match:.0f}%")
                
                # Direk mesaj g√∂nder
                timestamp = datetime.now().strftime('%H:%M:%S')
                
                if use_simple_signals:
                    message = f"""üöÄ <b>YENƒ∞ Sƒ∞GNAL</b>

üí∞ <b>Coin:</b> {symbol}
‚è∞ <b>Zaman:</b> {timestamp}
üìä <b>Timeframe Ba≈üarƒ±:</b> %{timeframe_success_rate:.0f} ({timeframe_success_count}/4)
üîç <b>Taranan:</b> {scanned}/{len(crypto_list)}
‚ö° <b>Sistem:</b> Basit analiz (14 kriter)

ü§ñ <i>Otomatik trading analizi</i>"""
                else:
                    message = f"""üöÄ <b>YENƒ∞ Sƒ∞GNAL</b>

üí∞ <b>Coin:</b> {symbol}
‚è∞ <b>Zaman:</b> {timestamp}
üìä <b>Timeframe Ba≈üarƒ±:</b> %{timeframe_success_rate:.0f} ({timeframe_success_count}/4)
üéØ <b>Pozisyon E≈üle≈ümesi:</b> %{best_match:.0f}
üìà <b>Referans Pozisyon:</b> {best_position.get('symbol', 'N/A')}
üîç <b>Taranan:</b> {scanned}/{len(crypto_list)}

ü§ñ <i>Geli≈ümi≈ü trading analizi</i>"""
                
                analyzer.send_telegram_message(message)
                
        except Exception as e:
            print(f"‚ùå {symbol} analiz hatasƒ±: {e}")
            continue
    
    print(f"‚úÖ Tarama tamamlandƒ±: {scanned} coin tarandƒ±, {signals_sent} sinyal g√∂nderildi")

if __name__ == "__main__":
    main()